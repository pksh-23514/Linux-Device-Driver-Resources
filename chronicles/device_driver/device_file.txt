Device Files:
=============
1. Devices are accessed as a file in Linux.
2. It is a special file or a node in Linux that gets populated in the "/dev" directory during Kernel boot-time or Device Driver hot plug-in events.
3. They act as an interface between User Programs and HW Devices, allowing the SW to interact with the Device Drivers.
4. They are managed as a part of the Virtual File-system (VFS) of the Kernel.
5. The "/dev" directory has several sub-directory hierarchies, each of which holds the Device files that are related to a certain type of Device.
6. The Device files in sub-directories are actually implemented as Symbolic-links to the Device files in "/dev".
7. The creation of these files are triggered by the Device Drivers.

Inside the /dev directory:
**************************
1. The command to list the details of the "/dev" directory is:
	=> ls -l
	=> crw--w----   1 root          tty       5,     1 May 10 11:16 console
	=> lrwxrwxrwx   1 root          root            11 May 10 11:15 core -> /proc/kcore
	=> drwxr-xr-x   2 root          root           440 May 10 11:15 block
	=> brw-rw----   1 root          disk      8,     0 May 10 11:15 sda
2. The entries with the letters have the following meaning:
	=> 'c' - Character Device files
	=> 'l' - Symblic Link
	=> 'd' - Directory
	=> 'b' - Block Device files
3. These Devices have a pair of numbers associated with them (instead of a file size): The Major and Minor number

Major and Minor Number:
************************
1. The Major number identifies the Driver associated with the Device. It is also known as the "device number" or "device major".
2. The Kernel uses the Major number at 'open' (System-call) time to dispatch the execution to the appropriate Driver.
3. The Minor number is used only by the Driver that is specified by the Major number for the Device.
4. The other parts of the Kernel don’t use the Minor number and merely pass it along to the Driver.
5. It is common for a particular Driver to control several Devices; the Minor number provides a way for the Driver to differentiate among them.
6. The Major number assignment is made at Driver (Module) initialization by calling the function in the Header file <linux/fs.h>:
	=> int register_chrdev(unsigned int major, const char *name, struct file_operations *fops)
	---> The return value for the function: 0 or Positive is Success and Negative is Failure/Error.
	---> 'major' argument is the Major number being requested.
	---> 'name' is the Device name that appears in the "/proc/devices".
	---> 'fops' is the Pointer to an Array of Function Pointers, used to invoke the Driver’s entry points.
	---> This is an Older way and has been replaced in the latest Kernel releases.
7. The Major numbers are a small integer that serves as the index into a static Array of Char Drivers.
8. The Minor numbers are not passed to this function as they are used only by the Driver.
9. Once the Driver has been registered in the Kernel table, it's operations are associated with the given Major number.
10. When the Driver (Module) is unloaded from the Kernel, the Major number associated must be released by the function in the Header file <linux/fs.h>:
	=> void unregister_chrdev(unsigned int major, const char *name)
	---> 'major' argument is the Major number being released.
	---> 'name' is the associated Device name.
	---> This is an Older way and has been replaced in the latest Kernel releases.
11. Failing to unregister can generate a fault in the next read of "/proc/devices" because one of the strings still points to the Module’s Memory, which is no longer mapped.
12. When the Kernel tries to access invalid Memory, the Kernel message displays an 'oops' fault.
13. Unloading the Driver without unregistering the Major number, recovery will be difficult because the original Module name must be de-referenced by the 'unregister_chrdev'.
14. The safest alternative for recovery is to reboot the Machine.

mknod Command:
**************
1. Device nodes are often created and destroyed automatically by 'udev', a User-space daemon to simplify Device management and allow customization of Device naming schemes.
2. However, Device files or nodes can also be created manually using the "mknod" command.
	=> sudo mknod /dev/my_device c <major_number> <minor_number>	# Create a Character Device file.
	=> sudo mknod /dev/my_block b <major_number> <minor_number>	# Create a Block Device file.
	=> sudo mknod /path/to/my_pipe p				# Create a named Pipe.
3. The Device file or node is present unless it is explicitly removed using the command:
	=> sudo rm /dev/name

dev_t Type and kdev_t Header file:
**********************************
1. Every time the Kernel calls a Device Driver, it tells the Driver which Device is being acted upon.
2. The Major and Minor numbers to identify the Device are paired in a single Data-type that resides in the field 'i_rdev' of the 'inode' Structure.
3. If the Driver receives a Pointer to 'struct inode', the Device number can be extracted by accessing 'inode -> i_rdev'.
4. Within the Linux Kernel, the 'dev_t' Data-type defined in the Header file <linux/types.h> is used to hold the Device numbers.
5. 'dev_t' is a Typedef used to represent the Major and Minor number. It is a 32-bit unsigned Integer where:
	=> the upper 12 bits store the Major number and the lower 20 bits store the Minor number.
6. In the Header file <linux/kdev_t.h>, there are Macros defined wrt the Major and Minor numbers:
	=> MAJOR(dev_t dev) - To extract the Major number.
	=> MINOR(dev_t dev) - To extract the Minor number.
	=> MKDEV(int major, int minor) - To convert the Major and Minor numbers into 'dev_t' Data-type.
