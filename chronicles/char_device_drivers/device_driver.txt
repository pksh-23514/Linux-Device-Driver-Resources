Device Driver:
==============
1. A Device Driver is a piece of code that configures and manages a Device.
2. It knows how to configure the Device, sending data to the Device and how to process the requests that originate from the Device.
3. When the Device Driver is loaded into the OS, it exposes the interface to the User-space to enable the User application's communication with the Device.

How Device Driver Functions:
****************************
1. The Device Driver operate inside the OS Kernel-space.
2. They work in a highly privileged environment because they need low-level access to HW operations to function.
3. They receive requests from the OS to access and execute Device instructions.
4. After completing the requests, they transmit the Device’s outputs or messages to the OS.

Visual representation of Device Driver Function:
************************************************
----------------------------------------------------------------------------------------------------------------------------------------
User-space: User-level Programs ---> read, write, open, echo ...
                                      |      |     |     |
                                      |      |     |     |		User-level Programs use System-calls to talk to the Device.
                                      |      |     |     |
                                      V      V     V     V
----------------------------------------------------------------------------------------------------------------------------------------
User-space: Device file interface --->	   /dev/DEVICE
						^			Device Driver provides an interface to the User-space.
						^			It is used by the User-level Programs for communication.
						|			In Linux, the Device is accessed using the File technique.
						|
----------------------------------------------------------------------------------------------------------------------------------------
Kernel-space: The Kernel connects the generated System-calls to the Device Driver's System-call Handler Methods.
						|
						V
				--------------------------------	Device Driver takes the burden of:
				    Device Driver for DEVICE		---> Configuring the various registers of the Device.
				--------------------------------	---> Exporting the interface to the User-space.
						^			---> Interacting with the Device.
						^			---> Processing the requests from the Device.
						|
----------------------------------------------------------------------------------------------------------------------------------------
Hardware Device: 				|
						V
					      DEVICE
----------------------------------------------------------------------------------------------------------------------------------------

Properties:
***********
1. A Device Driver is a specialized software that operates a particular Device, offering a SW interface to the HW.
2. It allows Operating System and other applications to access the Device functionalities.
3. The Device is linked to a Bus/Communication sub-system via which Device Driver interact with the Device.
4. They are Handler-dependent and OS-specific.
5. They offer the Interrupt processing that is essential for any time-dependent Asynchronous HW interface.
6. They define the messages and mechanisms through which the OS and applications can access the Device or make requests to the Device.
7. They handle the Device responses and messages for delivery to the OS.

Types of Device Driver:
=======================

Kernel Device Driver:
*********************
1. They are loaded within the OS for Core HW (such as Processors).
2. They are implemented as discrete and modular components that have more efficient communication and control over HW Devices.
3. They are layered i.e. the higher-level Drivers (file-system Drivers) filter the received data before passing it to the lower-level Drivers.
4. They are invoked and loaded into the RAM as required. Therefore, several of them operating at the same time can slow down the Machine.

User-mode Device Driver:
************************
1. They execute in User-mode and manage the external Devices (such as Plug-and-Play Devices) that Users might connect.
2. In Windows, they provide an interface between Win32 applications and Kernel-mode Drivers.
3. They are majorly written to the disk for reducing the strain on the Machine resources.

Character Device Driver:
************************
1. They provide unstructured access to the HW Devices.
2. They transfer data to and from the Devices without using a specific Device Address.
3. They provide the interfaces for I/O control commands, Memory Mapping and Device Polling.
4. Their peculiar functionality is the reading or writing of 'one byte at a time' as a stream of sequential data and not as a chunk of data.
5. They do not handle I/O through the Buffer-Cache i.e there are no sophisticated Buffering strategies involved. Therefore they are more flexible in handling I/O.
6. The data is directly written to the Device without any immediate Buffering, delayed write-backs and dirty Buffer management.
7. They are paired with the Block Devices to circumvent the Buffer-Cache to offer raw I/O operations straight to the Program Address-space of the User.
8. The Char Devices are sensors, RTC, Keyboard, Serial port etc.

Block Device Driver:
********************
1. They provide structured access to the HW Devices.
2. They use file-system Block-sized Buffers from a Buffer-Cache supplied by the Kernel to perform I/O operations.
3. A Buffer-Cache is a Memory pool established by the Kernel to store frequently accessed blocks via Block Devices.
4. The Buffer-Cache reduces the amount of 'I/O queries' required for an I/O operation from the Device.
5. The Device which handles data in chunks or blocks is called a Block Device.
6. They provide accessible block-oriented I/O and demonstrate Data durability.
7. They take a file-system request and issue the I/O procedures to the Disk for the transfer of the requested block.
8. They are more complicated than the Character Device Drivers as they have to implement the advanced Buffering strategies to read and write to the Block Devices.
9. The Block Devices are Hard-Disks, SDMMC, NAND Flash, USB etc.

BIOS:
*****
1. The basic input-output system (BIOS) is the most fundamental driver on a Computer.
2. It is located in the ROM chip, which ensures that BIOS will be available even if the Hard-Disk is formatted.
3. They are responsible for Booting the Computer, performing the Start-up tests and providing the Drivers for basic HW (such as Monitor, Keyboard etc).

Motherboard Drivers:
********************
1. They are simple applications that are utilized by both the Windows and the Linux OS.
2. They exist within the OS to enable fundamental Computer operations and peripheral connectivity in the OS.
3. They contain applications that allow the Keyboard and Mouse’s USB devices and I/O ports to work properly. Some provide the support for Video and Audio as well.
4. They are specific to Chip-set models and might need additional Drivers for full functionality.
