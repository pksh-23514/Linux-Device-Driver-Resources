Steps to Build the In-Tree (Internal) LKM:
==========================================

Module addition in Kernel Source Tree:
**************************************
1. The LKM must be added in the Linux Kernel Source Tree and the Build system builds that Module.
2. The path to the Kernel Source shall be the cloned repository of the BBB Linux Kernel (/workdir/linux_source_BBB_ver).
3. The path to include the LKM is (/workdir/linux_source_BBB_ver/drivers/char). A new directory (custom_driver) is created to contain the LKM files.
4. The Module (lkm.c) file can be created and updated at the path (/workdir/linux_source_BBB_ver/drivers/char/custom_driver).

Write Local Kconfig file for Module:
************************************ 
1. To list the LKM selection in the Kernel 'menuconfig' tool, a Kconfig file is created for the LKM.
2. The file named 'Kconfig' is created at the path (/workdir/linux_source_BBB_ver/drivers/char/custom_driver).
3. A basic Kconfig file can be as follows:
	=>	menu "in-tree custom module"
	=>	config IN_TREE_LKM
	=>		tristate "In-Tree module"
	=>		default m
	=>	endmenu
4. The local Kconfig file is saved with the configurations for the LKM.

Add local Kconfig file to upper-level Kconfig file:
***************************************************
1. The local Kconfig file must be sourced inside the upper-level Kconfig file.
2. The path (/workdir/linux_source_BBB_ver/drivers/char) has the upper-level Kconfig file.
3. The upper-level Kconfig file is opened and at the end of that file, add the source command for the local Kconfig file.
	=> source "drivers/char/custom_driver/Kconfig"
4. The source command must be added before the 'endmenu' command of the upper-level Kconfig file.

Write Local Makefile:
*********************
1. The file named 'Makefile' is created at the path (/workdir/linux_source_BBB_ver/drivers/char/custom_driver).
2. The Goal definitions are the main part of the kbuild Makefile.
3. They define the files to be built, any special compilation options and any sub-directories to be entered recursively.
4. The kbuild variable is defined as:
	=> obj-$(CONFIG_MODULE) += <Module_name>.o
	=> CONFIG_MODULE=y --> It is compiled and linked to the Kernel Image i.e. Static Kernel Module.
	=> CONFIG_MODULE=m --> It is compiled as a loadable Module i.e. Dynamic Kernel Module.
	=> CONFIG_MODULE=n --> It is not compiled.
5. The variable 'MODULE' here must have the same name as the 'config' symbol in the Kconfig file. It should be preceded by the keyword 'CONFIG_'.
6. This identifier will be replaced by the the Kernel menu configuration selection.
7. A basic Makefile can be as follows:
	=> obj-$(CONFIG_IN_TREE_LKM) += lkm.o

Add local Makefile to upper-level Makefile:
*******************************************
1. The local Makefile must be linked to the upper-level Makefile for the LKM to be build.
2. The path (/workdir/linux_source_BBB_ver/drivers/char) has the upper-level Makefile.
3. The entry for the LKM must be made at the end of the upper-level Makefile.
	=> obj-y += custom_driver/
	=> The folder has to be built always, therefore the '-y' option is selected in the command.
4. There is no 'CONFIG_' keyword for the folder selection. It is only used for Module selection.

Linux Menu Configuration:
*************************
1. The path to run the 'menuconfig' tool shall be the cloned repository of the BBB Linux Kernel (/workdir/linux_source_BBB_ver).
2. The 'menuconfig' tool is triggered using the 'make' command:
	----------------------------
	=> make ARCH=arm menuconfig
	----------------------------
3. Inside the 'menuconfig' tool, the sequence to follow is:
	=> Device Drivers ---> Character devices ---> in-tree custom module ---> In-Tree module
4. The 'Character devices' has the menu entry with the prompt mentioned in the 'menu' keyword of the Kconfig file.
5. The menu entry has the name of the Module mentioned in the 'tristate' expression of the Kconfig file.
6. The menu entry has the default state of the Module mentioned in the 'default' value of the Kconfig file.
7. To update the Module state (if required), the Space Bar on the Keyboard is used. Then the Kernel configurations is saved and the 'menuconfig' tool is exited.
	=> [*] - Built-In
	=> <M> - Module
	=> < > - Module capable
	=> [ ] - Excluded
8. The 'Help' on the Module has the 'config' symbol as mentioned in the Kconfig file.

Build Syntax for Internal Module:
*********************************
1. The .config file at the path (/workdir/linux_source_BBB_ver) can be verified to contain the custom Module identifier (CONFIG_IN_TREE_LKM=m).
2. The Build is triggered using the 'make' command:
	----------------------------------------------------------------
	=> make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- modules -jX
	----------------------------------------------------------------
	=> 'X' is the number of parallel jobs that run in the Build used for speeding-up the process on multi-Core systems.
3. The .ko file generated at the path (/workdir/linux_source_BBB_ver/drivers/char/custom_driver) will have the File Type as per the Cross-Compiler mentioned.
4. The "modinfo" command is used to display all the Module descriptions. The field 'intree' is now updated to 'Y' highlighting that the Module is In-Tree.

Transfer and Testing of LKM on Target:
**************************************
1. The LKM can be transferred on the Target through SCP connection between the Host and the Target.
2. The 'ssh-keygen' must be generated if the SCP throws some error in transferring the LKM to the Target.
3. The LKM can be inserted to the running Kernel and later removed from the Kernel as per requirement.

Insertion and Deletion of Module to/from Kernel:
************************************************
1. To insert the Kernel Module into the running Kernel, the command is:
	=> sudo insmod <Module_name>.ko
2. To verify the successful insertion of the LKM, the "dmesg" log can be verified:
	=> dmesg | grep <Module_name>
3. The warning message of "module taints kernel" is not generated by the Internal Module.
4. The message from the start function is displayed in the "dmesg" log.
5. To remove the Kernel Module from the running Kernel, the command is:
	=> sudo rmmod <Module_name>
6. To verify the successful deletion of the LKM, the "dmesg" log can be verified to have the message from the exit function.
