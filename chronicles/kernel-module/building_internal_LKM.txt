Steps to Build the In-Tree (Internal) LKM:
==========================================

Module addition in Kernel Source Tree:
**************************************
1. The LKM must be added in the Linux Kernel Source Tree and the Build system builds that Module.
2. The path to the Kernel Source shall be the cloned repository of the BBB Linux Kernel (/workdir/linux_source_BBB_ver).
3. The path to include the LKM is (/workdir/linux_source_BBB_ver/drivers/char). A new directory (custom_driver) is created to contain the LKM files.
4. The Module (lkm.c) file can be created and updated at the path (/workdir/linux_source_BBB_ver/drivers/char/custom_driver).

Write Kconfig file for Module:
****************************** 
1. To list the LKM selection in the Kernel menuconfig tool, a Kconfig file is created for the LKM.
2. The file named 'Kconfig' is created at the path (/workdir/linux_source_BBB_ver/drivers/char/custom_driver).
3. A basic Kconfig file can be as follows:
	=>	menu "in-tree custom module"
	=>	config IN_TREE_LKM
	=>		tristate "In-Tree module"
	=>		default m
	=>	endmenu
4. The local Kconfig file is saved with the configurations for the LKM.

Add local Kconfig file to upper-level Kconfig file:
***************************************************
1. The local Kconfig file must be sourced inside the upper-level Kconfig file.
2. The path (/workdir/linux_source_BBB_ver/drivers/char) has the upper-level Kconfig file.
3. The upper-level Kconfig file is opened and at the end of that file, add the source command for the local Kconfig file.
	=> source "drivers/char/custom_driver/Kconfig"
4. The source command must be added before the 'endmenu' command of the upper-level Kconfig file.

Write Local Makefile:
*********************
1. The file named 'Makefile' is created at the path (/workdir/linux_source_BBB_ver/drivers/char/custom_driver).
2. The Goal definitions are the main part of the kbuild Makefile.
3. They define the files to be built, any special compilation options and any sub-directories to be entered recursively.
4. The kbuild variable is defined as:
	=> obj-$(CONFIG_MODULE) += <Module_name>.o
	=> CONFIG_MODULE=y --> It is compiled and linked to the Kernel Image i.e. Static Kernel Module.
	=> CONFIG_MODULE=m --> It is compiled as a loadable Module i.e. Dynamic Kernel Module.
	=> CONFIG_MODULE=n --> It is not compiled.
5. The variable 'MODULE' here must have the same name as the 'config' symbol in the Kconfig file. It should be preceded by the keyword 'CONFIG_'.
6. This identifier will be replaced by the the Kernel menu configuration selection.
7. A basic Makefile can be as follows:
	=> obj-$(CONFIG_IN_TREE_LKM) += lkm.o

Add local Makefile to upper-level Makefile:
*******************************************
1. The local Makefile must be linked to the upper-level Makefile for the LKM to be build.
2. The path (/workdir/linux_source_BBB_ver/drivers/char) has the upper-level Makefile.
3. The entry for the LKM must be made at the end of the upper-level Makefile.
	=> obj-y += custom_driver/
	=> The folder has to be built always, therefore the '-y' option is selected in the command.
4. There is no 'CONFIG_' keyword for the folder selection. It is only used for Module selection.
