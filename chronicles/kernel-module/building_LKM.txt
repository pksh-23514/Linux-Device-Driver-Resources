Steps to Build the Out-of-Tree (External) LKM:
==============================================

Compile the Kernel Source Tree:
*******************************
1. The pre-Built Kernel version can be obtained by the following ways:
	1) To download the Kernel source from the distributor (BeagleBone Black) and build it.
	2) To install the Linux Headers of the Target Linux Kernel if the Kernel source is unavailable.

Build Syntax for the External Module:
*************************************
1. The command to build an External Module is:
	=> make -C <path_to_Kernel_Source> M=<path_to_Module> [target]
	=> The kbuild system understands that an External Module is being built due to the 'M=<dir>' option in the command.
	=> The 'make -C' is used to trigger the top-level Makefiles of the Linux Kernel Source. It utilizes the Compiler switches, the Dependency list and the Version string.
	=> The top-level Makefile is directed to the local Makefile or to a local folder containing the Module source code by the 'M=<dir>' option.
	=> The 'target' option can be included in the command for various Target options:
		--> modules - The default target for External Modules. It builds the Module located in the the Absolute Path of the directory.
		--> modules_install - To install the external module(s). The default location is "/lib/modules/<kernel_release>/extra/".
		--> clean - To remove all the generated files in the Module directory only.
		--> help - To list the available 'targets' for the External Modules.

Write Local Makefile:
*********************
1. The Makefiles within the Kernel are kbuild Makefiles using the kbuild infrastructure.
2. The preferred name for the kbuild files are 'Makefile', however the name 'Kbuild' can also be used.
3. If both a 'Makefile' and a 'Kbuild' file exists, then the 'Kbuild' file is used.
4. The Goal definitions are the main part of the kbuild Makefile.
5. They define the files to be built, any special compilation options and any sub-directories to be entered recursively.
6. The kbuild variable is defined as:
	=> obj-<CONFIG_MODULE> := <Module_name>.o
	=> CONFIG_MODULE=y --> It is compiled and linked to the Kernel Image i.e. Static Kernel Module.
	=> CONFIG_MODULE=m --> It is compiled as a loadable Module i.e. Dynamic Kernel Module.
	=> CONFIG_MODULE=n --> It is not compiled.
7. The kbuild system builds the <Module_name>.o from <Module_name>.c and after linking, the result is the Kernel Module <Module_name>.ko.
8. When the Module is built from multiple sources:
	=> obj-<CONFIG_MODULE> := <Module_name>.o
	=> <Module_name>-<CONFIG_MODULE> := <src1>.o <src2>.o ...
