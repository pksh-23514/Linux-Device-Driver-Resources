Steps to Build the Out-of-Tree (External) LKM:
==============================================

Compile the Kernel Source Tree:
*******************************
1. The pre-Built Kernel version can be obtained by the following ways:
	1) To download the Kernel source from the distributor (BeagleBone Black) and build it.
	2) To install the Linux Headers of the Target Linux Kernel if the Kernel source is unavailable.

Build Syntax for the External Module:
*************************************
1. The command to build an External Module is:
	=> make -C <path_to_Kernel_Source> M=<path_to_Module> [target]
	=> The kbuild system understands that an External Module is being built due to the 'M=<dir>' option in the command.
	=> The 'make -C' is used to trigger the top-level Makefiles of the Linux Kernel Source. It utilizes the Compiler switches, the Dependency list and the Version string.
	=> The top-level Makefile is directed to the local Makefile or to a local folder containing the Module source code by the 'M=<dir>' option.
	=> The 'target' option can be included in the command for various Target options:
		--> modules - The default target option for External Modules. It builds the Module located in the the Absolute Path of the Module directory.
		--> modules_install - To install the external Module(s). The default location is "/lib/modules/<kernel_release>/extra".
		--> clean - To remove all the generated files in the Module directory only.
		--> help - To list the available 'targets' for the External Modules.

Write Local Makefile:
*********************
1. The Makefiles within the Kernel are kbuild Makefiles using the kbuild infrastructure.
2. The preferred name for the kbuild files are 'Makefile', however the name 'Kbuild' can also be used.
3. If both a 'Makefile' and a 'Kbuild' file exists, then the 'Kbuild' file is used.
4. The Goal definitions are the main part of the kbuild Makefile.
5. They define the files to be built, any special compilation options and any sub-directories to be entered recursively.
6. The kbuild variable is defined as:
	=> obj-<CONFIG_MODULE> := <Module_name>.o
	=> CONFIG_MODULE=y --> It is compiled and linked to the Kernel Image i.e. Static Kernel Module.
	=> CONFIG_MODULE=m --> It is compiled as a loadable Module i.e. Dynamic Kernel Module.
	=> CONFIG_MODULE=n --> It is not compiled.
	=> The 'CONFIG_MODULE' is the the kind of variables that are set in the .config file in the top-level directory of Linux Kernel Source Tree.
7. The kbuild system builds the <Module_name>.o from <Module_name>.c and after linking, the result is the Kernel Module <Module_name>.ko.
8. When the Module is built from multiple sources:
	=> obj-<CONFIG_MODULE> := <Module_name>.o
	=> <Module_name>-<CONFIG_MODULE> := <src1>.o <src2>.o ...

Makefile Execution for Host:
****************************
1. The local folder is created at any suitable path on the system. It contains the C file of the Kernel Module and the corresponding Makefile.
2. The build can be done for the Host system.
3. The Linux version on the Host "kernel_version" can be checked using the command:
	=> uname -r
4. The pre-Built Kernel Source and the Kernel Header files can be found at the path "/lib/modules/kernel_version".
5. The Build is triggered using the 'make' command:
	-------------------------------------------------------------
	=> make -C /lib/modules/kernel_version/build/ M=$PWD modules
	-------------------------------------------------------------
	=> The Makefile references to the Kernel's Build directory for External Modules to access the Kernel Source files (/lib/modules/kernel_version/build).
	=> The variable 'M' is pointing to the path of the Module which is generally used as the Absolute Current directory path.
	=> The top-level Makefile gets the path of the Module through 'M' and the local Makefile is detected at the path.
	=> The local Makefile is built and the <Module_name>.o file is generated.
	=> The <Module_name>.o is further compiled as Module and the <Module_name>.mod.o file is generated.
	=> The <Module_name>.mod.o is linked to generate the final <Module_name>.ko file.
6. To clean the Build, the 'make' command with the 'clean' option is executed:
	=> make -C /lib/modules/kernel_version/build/ M=$PWD clean

Makefile Execution for Target:
******************************
1. The local folder is created at any suitable path on the system. It contains the C file of the Kernel Module and the corresponding Makefile.
2. The build can be done for the Target system.
3. The path to the Kernel Source shall be the cloned repository of the BBB Linux Kernel (/workdir/linux_source_BBB_ver).
4. The Build is triggered using the 'make' command:
	----------------------------------------------------------------------------------------------------------
	=> sudo make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- -C /workdir/linux_source_BBB_ver/ M=$PWD modules
	----------------------------------------------------------------------------------------------------------
	=> The 'sudo' command could cause error while building the Module. It could mess with the PATH Environment variable.
	=> The Toolchain binary Absolute path must be copied from the '.bashrc' file in $HOME of the Host (added in the Host setup process).
	=> It is pasted in the file '/etc/sudoers' under the variable 'secure_path' along with other paths separated by a colon.
	=> The command is executed successfully and the final <Module_name>.ko file is generated.
	=> The Makefile references to the Kernel's directory for External Modules to access the Kernel Source files (/workdir/linux_source_BBB_ver).
	=> The rest of the Build process is the same as defined under the "Makefile Execution for Host" section.
5. The .ko file generated will have the File Type as per the Cross Compiler mentioned.
6. The "modinfo" command is used to display all the Module descriptions.
7. The Sections of the Module can be analyzed by running the command:
	=> arm-linux-gnueabihf-objdump -h <Module_name>.ko
	=> The start and end functions of the Module are present in the '.init.text' and '.exit.text' Sections of the 'Module_name.ko' file.
	=> The '.data' Section will contain the Data present in the Module.

Transfer and Testing of LKM on Target:
**************************************
1. The LKM can be transferred on the Target through SCP connection between the Host and the Target.
2. The 'ssh-keygen' must be generated if the SCP throws some error in transferring the LKM to the Target.
3. The LKM can be inserted to the running Kernel and later removed from the Kernel as per requirement.

Insertion and Deletion of the Module to/from Kernel:
****************************************************
1. To insert the Kernel Module into the running Kernel, the command is:
	=> sudo insmod <Module_name>.ko
2. To verify the successful insertion of the LKM, the "dmesg" log can be verified:
	=> dmesg | grep <Module_name>
3. The warning message of "loading out-of-tree module taints kernel" is generated by the External Module.
4. The warning message of "module verification failed: signature and/or required key missing - tainting kernel" is also generated if the Kernel has sign verification as ON.
5. The message from the start function is displayed in the "dmesg" log.
6. To remove the Kernel Module from the running Kernel, the command is:
	=> sudo rmmod <Module_name>
7. To verify the successful deletion of the LKM, the "dmesg" log can be verified to have the message from the exit function.
