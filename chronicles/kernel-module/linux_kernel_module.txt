Linux Kernel Module:
====================
1. Linux supports dynamic insertion and removal of code from the Kernel while the board is up and running. This code is called the Kernel Module.
2. Once the Kernel Module is loaded into the Kernel, the new features and functionalities are available to use without restarting the board.
3. The Kernel Module dynamically extends the functinalities of the Kernel by introducing security, device drivers, file system drivers, system calls etc.
4. Support for Kernel Module allows the Embedded Linux systems to have minimal base Kernel Image and other features are supplied on-demand via Module addition.

Static and Dynamic Kernel Module:
=================================
1. During the Build, if the Modules are statically linked to the Kernel Image i.e. Modules become a part of the final Image, it is Static LKM.
2. During the Build, if the Modules are compiled and linked separately to produce .ko files and not a part of the final Image, it is Dynamic LKM.
3. The Static LKM increases the size of the final Kernel Image. The Dynamic LKM is size efficient.
4. The Static LKM is built-in the Kernel Image and cannot be unloaded. Hence, it occupies the Memory permanently during run-time.
5. The Dynamic LKM can be loaded and unloaded into/from the Kernel based on the requirement during run-time through the User-space directly.

User-space vs Kernel-space:
===========================
1. User-space is the area of Memory that runs the non-Kernel applications.
2. The User-space Process is executed by the USER in the OS rather than being a part of the OS.
3. The User-space Process can also be executed by an 'init' system (systmed) but isn't a part of the Kernel.
4. The User-space Process runs in User mode i.e. the Process instructions are executed with the Non-Privileged execution mode.
5. The User-space applications are also known as User-land applications.
6. The User-space applications cannot directly access the system's resources. They have to switch to Kernel mode to access the resources.
7. The switch to Kernel mode triggers a system call to the Kernel with a request to access the resources. The 'syscall' is executed by the Kernel.
8. This kind of execution ensures that a User-space Process cannot access or modify memory managed by the Kernel. Also, it can't interfere with the other Process executions.
9. Kernel-space is the area of Memory that is reserved for the Kernel to run and execute the Kernel mode instructions.
10. The Kernel is responsible for the management of the system's resources. It has unrestricted access to the systemâ€™s hardware resources.
11. This is necessary for the Kernel to perform the essential tasks such as scheduling Processes, managing Memory and handling Interrupts.
12. The Kernel mode is the execution mode of the Kernel which runs in a privileged, root-access mode.

Building the Kernel Module:
===========================
1. The LKM can be built in 2 ways:
        1) Statically linked to the Kernel Image.
        2) Dynamically loadable to the Kernel Image.
2. The Dynamically loadable Kernel Module can be further divided into 2 types:
        1) In-Tree Kernel Module
        2) Out-of-Tree Kernel (External) Module
3. Modules are built in the Linux Kernel using the "kbuild" Build system. It is used by the Modules:
	1) To stay compatible with the changes in the Build infrastructure.
	2) To pick up the right flags to GCC.
4. To build Out-of-Tree Modules, a pre-Built Kernel is required that contains the configurations and Header files to be used in the Build.
5. The reason for the pre-compiled Kernel Source Tree is that the Modules are linked against the Object files present in the Kernel Source Tree.
6. For a distribution Kernel, there is a package for the running Kernel provided by the distributor.
7. The advantage of the building the LKM separately from the Kernel's source files is to keep the Module organized, isolated and compatible across different systems.
8. The LKM compiled against one Kernel version and loaded in the system having another Kernel version is either unsuccessful or could encounter Run-time issues.

Definitions:
************
1. Linux Kernel Source Tree - It consists of all the source code for the Kernel and Device Drivers for all supported Processor Architectures.
2. In-Tree Module - The Module that is internal to the Linux Kernel Source Tree. It is approved by the Kernel developers and maintainers.
3. Out-of-Tree Module - The Module that is external to the Linux Kernel Source Tree. It taints the Kernel and a warning is issued by the Kernel.
