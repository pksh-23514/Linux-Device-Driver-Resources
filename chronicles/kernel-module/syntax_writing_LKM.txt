Parts of the Linux Kernel Module:
=================================
1. The Module can be divided into the following sections:
	1) Header sction
	2) Code section
	3) Registration section
	4) Module Description section

Header section:
===============
1. The Header section contains all the required Kernel Header files.
2. The Kernel Header files are located in the Linux cloned directory at the path (<linux_SRC>/include/linux).
3. The LKM are executed in the Kernel-space and therefore, they require the Kernel Headers which are different from the User-space Headers (C-Standard Library Headers).
4. There is no User-space Library that is linked to the LKM.
5. The Kernel Headers include the C files that specify the interface between the Linux Kernel and User-space libraries and programs.
6. The Kernel Headers define the structures and constants that are needed for the building of most standard programs.
7. Lastly, every LKM needs to include the Header file <linux/module.h>.

Code Section:
=============
1. The LKM must have at least two functions:
	1) A start (initialization) function called "init_module()" which is called when the Module is 'insmod(ed)' into the Kernel.
	2) An end (cleanup) function called "cleanup_module()" which is called just before it is removed from the Kernel.
2. There is no restriction to the function names after the Kernel v_2.3.13.
3. The "module_init" and "module_exit" Macros are used to give any names to the start and end functions.
4. These Macros are defined in the Header file <linux/module.h>.
5. The only requirement is that the 'init' and 'cleanup' functions must be defined before calling these Macros, otherwise there are compilation errors.
6. The other Macros "__init" and "__exit" are used to free the Kernel Memory (visible during the Kernel Boot).
7. These Macros are defined in the Header file <linux/init.h>.
8. They are Function Section attributes:
	1) __init --> It directs the Compiler to keep the data or code in an Output section called ".init" of the final ELF of the Kernel.
	2) __exit --> It directs the Compiler to keep the data or code in an Output section called ".exit" of the final ELF of the Kernel.
	3) If no attributes are defined for the function, they are placed in the ".text" section of the final ELF of the Kernel.
9. The Macros "__initdata" and "__initconst" discard the Variables after the initialization.
10. The Module description can be provided using the Macros "MODULE_LICENSE", "MODULE_AUTHOR" and "MODULE_DESCRIPTION".
11. The license can be GPL (free) or non-GPL (proprietary) licenses. If a Module license is non-GPL, the Kernel triggers a warning of being 'tainted'.
12. The allowed free license parameters that can be used are defined in the Header file <linux/module.h>.
13. The Macro "MODULE_INFO" is used to provide a custom message about the Module. It is used to store the Key-Value pairs in the ".modinfo" section of the compiled Modules.
14. All the Module descriptions use "MODULE_INFO" to store the information in the ".modinfo" section of the compiled Modules.
15. The "modinfo" command in Linux is used to display all the Module descriptions.

Start function:
***************
1. The start fumction:
	1) Either registers a Handler for something with the Kernel.
	2) Or replaces one of the Kernel functions with it's own code (usually the code does something and then calls the original function).
2. The prototype for the start function is: static int __init function_name(void)
	1) static - Since the start function is LKM specific, it should never be called from another LKM. Although, it is optional.
	2) __init - It causes the init function to be discarded and its Memory freed once the start function finishes for Built-in Modules, but not for loadable Modules.
3. The return value of the start function is:
	1) Zero --> Success
	2) Non-Zero --> Failure
4. If the start function returns a non-zero value i.e. the LKM initialization has failed and the LKM cannot be loaded in the Kernel.
5. In case of Static LKM, the start function is called during the Boot time only. It is never called until the next Reboot.
6. In case of Dynamic LKM, the start function is called during the Module insertion.
7. There is no main() function in the LKM as the start function is the entry point of the LKM.
8. The start function can perform:
	1) Initialization of Devices
	2) Initialization of Device private Data Structures
	3) Request Memory dynamically for the various Data Structures and Services
	4) Device File creation

End function:
*************
1. The end function is supposed to undo whatever the start function earlier did; so the Module can be unloaded safely.
2. The prototype for the end function is: static void function_name(void)
	1) static - Since the end function is LKM specific, it should never be called from another LKM. Although, it is optional.
	2) __exit - It causes the omission of the end function for Built-in Modules, but has no effect for loadable Modules.
3. In case of Static LKM, the end function is never called as the LKM is never removed.
4. In case of Dynamic LKM, the end function is called during the Module removal.
5. Therefore, in the Static LKM implementations, there is no need to implement this function.
6. If the Static LKM has an end function, the Kernel Build system removes such function during the Build process if there is an "__exit" marker.
7. The end function can perform:
	1) Undo-ing the start function
	2) Free Memory requested during the start function
	3) De-Initialization of Devices or leave the Device in a proper state

Module Entry points Registration:
*********************************
1. The "module_init" and "module_exit" Macros are used to register the start and end functions with the Kernel.
2. The "module_init" is used to add the parameter i.e. the start function to the 'init' Entry point database of the Kernel.
3. The "module_exit" is used to add the parameter i.e. the end function to the 'exit' Entry point database of the Kernel.
