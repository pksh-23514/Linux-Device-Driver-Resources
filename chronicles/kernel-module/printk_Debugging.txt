Debugging with printk:
======================
1. 'printf' is one of the best debugging tool used in User-level applications.
2. In the Kernel-space, there is no access to the User-level functions like 'printf'.
3. The Kernel has it's own API 'printk' for Kernel-space printing.
4. The Syntax is:
	---> printk(KERN_INFO "Message: %s\n", arg);
	---> There is no comma in between the 'KERN_INFO' and the 'Message'.
5. The 'printk' messages are printed to the Kernel log buffer, which is a ring buffer exported to User-space through "/dev/kmsg".
6. The 'dmesg' command is used to read the Kernel messages.
7. The 'printk' format String is mostly compatible with C99. However, it does not support Floating-point formats (%e, %f and %g).
8. The 'printk' message can specify a Log-level specified by the 'KERN_INFO' value. There are 8 Log-levels provided in Linux.
9. The Log-level details are Macros defined in the Header file <linux/kern_levels.h>.
10. The Log-level specifies the importance of a message. A lower number Log-level indicates a higher priority and vice-versa.
11. The Log-level definitions are as follows:
	=> #define KERN_SOH	"\001"		/* ASCII Start Of Header */
	=> #define KERN_EMERG	KERN_SOH "0"	/* system is unusable */
	=> #define KERN_ALERT	KERN_SOH "1"	/* action must be taken immediately */
	=> #define KERN_CRIT	KERN_SOH "2"	/* critical conditions */
	=> #define KERN_ERR	KERN_SOH "3"	/* error conditions */
	=> #define KERN_WARNING	KERN_SOH "4"	/* warning conditions */
	=> #define KERN_NOTICE	KERN_SOH "5"	/* normal but significant condition */
	=> #define KERN_INFO	KERN_SOH "6"	/* informational */
	=> #define KERN_DEBUG	KERN_SOH "7"	/* debug-level messages */
	=> #define KERN_DEFAULT	""		/* the default kernel loglevel */
	=> /*
	=>  * Annotation for a "continued" line of log printout (only done after a
	=>  * line that had no enclosing \n). Only to be used by core/arch code
	=>  * during early bootup (a continued line is not SMP-safe otherwise).
	=>  */
	=> #define KERN_CONT	KERN_SOH "c"
12. The Kernel configuration 'CONFIG_MESSAGE_LOGLEVEL_DEFAULT' defined in the file <lib/Kconfig.debug> determines the default Kernel Log-level (i.e. level-4).

Significance of the Log-level:
******************************
1. The Kernel decides whether to display the message on the current Console by comparing the message Log-level with the current Console Log-level.
2. If the message priority is higher (lower Log-level value) than the Console Log-level, the message gets printed to the Console.
3. The Kernel configuration 'CONFIG_CONSOLE_LOGLEVEL_DEFAULT' defined in the file <lib/Kconfig.debug> determines the default Console Log-level (i.e. level-7).
4. The Console Log-level can be determined by running the command:
	=> cat /proc/sys/kernel/printk
	--->	4	4	1	7
	---> The output displays the 'current', 'default', 'minimum' and 'boot-time-default' Console Log-levels.
5. To update the current Console Log-level during the Kernel running, write the desired value by running the command:
	=> echo 8 > /proc/sys/kernel/printk
	---> This value (level-8) can be used to print all the Kernel messages to the Console.

printk Wrappers:
****************
1. There are alternative Macros to 'printk' function used for logging. They are more concise than the equivalent 'printk' calls.
2. These Macros embed the Log-level in the Macro names. They are:
	=> pr_emerg("Message: %s\n", arg); - printk with KERN_EMERG.
	=> pr_alert("Message: %s\n", arg); - printk with KERN_ALERT.
	=> pr_crit("Message: %s\n", arg); - printk with KERN_CRIT.
	=> pr_err("Message: %s\n", arg); - printk with KERN_ERR.
	=> pr_warn("Message: %s\n", arg); - printk with KERN_WARNING.
	=> pr_notice("Message: %s\n", arg); - printk with KERN_NOTICE.
	=> pr_info("Message: %s\n", arg); - printk with KERN_INFO.
	=> pr_cont("Message: %s\n", arg); - printk with KERN_CONT.
	=> pr_devel("Message: %s\n", arg); - printk with KERN_DEBUG (if DEBUG is defined). Otherwise it does nothing.
	=> pr_debug("Message: %s\n", arg); - dynamic_pr_debug() (if CONFIG_DYNAMIC_DEBUG is SET). Or printk with KERN_DEBUG (if DEBUG is defined). Otherwise it does nothing.
3. The Macros are defined in the Header file <linux/printk.h>
