Memory Usage in the scull:
==========================

Device in scull:
****************
1. Before implementing the 'read' and 'write' functions for the scull, it is important to understand how the scull performs Memory allocation.
2. This Memory allocation technique is limited to scull only. Also, it is very different from the actual HW management in the real Device Drivers.
3. The region of Memory used by scull is called as Device. It is variable in length.
4. The more data is written to the Device, it is grown bigger. Similarly, the trimming is performed by over-writing this Device with a shorter file.

kmalloc and kfree Functions:
****************************
1. The 'kmalloc' function is a Memory allocation function used in the Kernel (within Kernel's Memory management system).
2. The 'kmalloc' function prototype is:
	=> void *kmalloc(size_t size, int flags);
	---> The 'size' argument denotes the number of bytes to be allocated.
	---> The 'flags' argument denotes how the Memory should be allocated. They are also called as GFP flags i.e. General Function Purpose flags.
	---> The return value is a Pointer to the allocated Memory on Success. Otherwise, it returns NULL on Error.
3. The GFP flags are defined in the Header file <linux/gfp_types.h>.
	=> #define GFP_ATOMIC	(__GFP_HIGH|__GFP_KSWAPD_RECLAIM)
	=> #define GFP_KERNEL	(__GFP_RECLAIM | __GFP_IO | __GFP_FS)
	=> #define GFP_KERNEL_ACCOUNT (GFP_KERNEL | __GFP_ACCOUNT)
	=> #define GFP_NOWAIT	(__GFP_KSWAPD_RECLAIM | __GFP_NOWARN)
	=> #define GFP_NOIO	(__GFP_RECLAIM)
	=> #define GFP_NOFS	(__GFP_RECLAIM | __GFP_IO)
	=> #define GFP_USER	(__GFP_RECLAIM | __GFP_IO | __GFP_FS | __GFP_HARDWALL)
	=> #define GFP_DMA		__GFP_DMA
	=> #define GFP_DMA32	__GFP_DMA32
	=> #define GFP_HIGHUSER	(GFP_USER | __GFP_HIGHMEM)
	=> #define GFP_HIGHUSER_MOVABLE	(GFP_HIGHUSER | __GFP_MOVABLE | __GFP_SKIP_KASAN)
	=> #define GFP_TRANSHUGE_LIGHT	((GFP_HIGHUSER_MOVABLE | __GFP_COMP | \
				   __GFP_NOMEMALLOC | __GFP_NOWARN) & ~__GFP_RECLAIM)
	=> #define GFP_TRANSHUGE	(GFP_TRANSHUGE_LIGHT | __GFP_DIRECT_RECLAIM)
4. The 'kmalloc' function is not the most efficient way to allocate large Memory areas. However, it is easy for depicting the R/W operations in scull.
	1) So, the scull uses 'kmalloc' function without resorting to allocation of whole Pages which is a more efficient way.
	2) The 'kmalloc' function is generally preferred for allocations (less than 128 kB).
	3) On the flip side, the Device area should not be limited for a practical use.
		=> Practically, the scull can be used to temporarily eat up the systemâ€™s Memory in order to run tests under low-Memory conditions.
5. The 'kfree' function is Memory releasing function for previously allocated Memory in the Kernel (within Kernel's Memory management system).
6. The 'kfree' function prototype is:
	=> void kfree(void *ptr);
	---> The 'ptr' is the Pointer to the Memory block to be released back to the Kernel Memory allocator. It is legal to pass a NULL Pointer to 'kfree'.
	---> There is no return value.
	---> If the 'ptr' is NULL, the 'kfree' function does nothing.
7. The Pointer passed to the 'kfree' function must be returned from the 'kmalloc' function.
	1) Using the 'kfree' function on a Pointer that was not allocated by Kernel Memory allocation routines lead to Kernel crashes.
	2) Using the 'kfree' function on a Pointer that has already been freed can also result in undefined behavior or Kernel crashes.
8. They are defined in the Header file <linux/slab.h>.
9. For the scull implementation, the GFP_KERNEL flag is used in 'kmalloc' function and the allocated Memory should be freed with the 'kfree' function.

Memory Organization in scull:
*****************************
1. The scull uses a 2-level Memory structure:
	1) Quantum - It is a small fixed-size block of Memory which is a basic data unit in the scull's Memory layout.
	2) Quantum Set - It is a Structure that contains an Array of Pointers to the Quantums. It also has a Pointer to the next Quantum Set.
2. Each Quantum holds the data like a Page or mini-Buffer. The Quantum Set is like a Page table entry to tell where the Quantum is present.
	1) This is very similar to a 2-dimensional Array but it is implemented dynamically using Linked-Lists.
	2) The new Memory is allocated on-demand i.e. only when a data is written.
3. The size of each Quantum is typically 4000 bytes and the Array size i.e. number of Quantum Pointers is typically 1000.
	1) Both the parameters are set by the scull in the 'scull_dev' Structure.
	2) It implies that each Quantum Set can point to 1000 Quantums and each Quantum is of the size 4000 bytes.
	3) Therefore, one Quantum Set takes up: 4000 * 1000 = 4 million bytes
4. The Memory representation in the scull can be visualized as:
	=> scull_dev
		|
		V
	   [qset_0] ---> [qset_1] ---> [qset_2] ---> ... ---> NULL
		|	      |		    |
		V	      V             V
	   1000 Quantums 1000 Quantums 1000 Quantums
	     [*data]	   [*data]	 [*data]
		|	      |		    |
		V	      V		    V
	   [quantum_0]	 [quantum_0]   [quantum_0]
	   [quantum_1]	 [quantum_1]   [quantum_1]
		.	      .		    .
		.	      .		    .
		.	      .		    .
	   [quantum_999] [quantum_999] [quantum_999]
5. After one Quantum Set is fully occupied, a new Quantum Set is dynamically allocated and linked to the previous Quantum Set.

Memory Footprint:
*****************
1. The Memory usage depends on the following:
	1) The size of the data written to the Device.
	2) The Quantum and Quantum Set configuration.
	3) Fragmentation (since not all the Quantums are necessarily fully used).
2. Let us take an example where a data of 10 million bytes are to be written to the Device.
	=> quantum = 4000 bytes
	=> qset = 1000 (each qset can point to 1000 quantums)
	=> Each qset can store: 4000 * 1000 = 4 million bytes
	=> So 10 million bytes will require: 3 qsets i.e. 2 full qsets and 1 partially filled qset.

Address Calculation logic:
**************************
1. In file operations, the scull maps the file position to the correct Memory locations using the logic as below:
	=> int itemsize = quantum * qset;	// The size of Memory in the qset.
	=> item = (long)*f_pos / itemsize;	// The correct qset in the Linked-List.
	=> rest = (long)*f_pos % itemsize;	// How far in this correct qset.
	=> s_pos = rest / quantum;		// The correct quantum in the qset.
	=> q_pos = rest % quantum;		// The byte position inside the quantum.
2. Let us take an example where:
	=> f_pos = 5,400,000 (bytes into the Device)
	=> quantum = 4000 bytes
	=> qset = 1000
	=> itemsize = 4,000,000
	=> item = 5,400,000 / 4,000,000 = 1		---> This means the 'f_pos' is in the 'qset[1].
	=> rest = 5,400,000 % 4,000,000 = 1,400,000	---> This means how far into the 'qset[1]' the 'f_pos' points.
	=> s_pos = 1,400,000 / 4000 = 350		---> This means the 'f_pos' points to the 'quantum[350]'.
	=> q_pos = 1,400,000 % 4000 = 0			---> This means the 'f_pos' points to the starting of the 'quantum[350]'.
