Important File Operations for the scull:
========================================

open Function:
**************
1. The 'open' function is provided for a Driver to do any initialization in preparation for later operations.
2. Generally, it performs the following tasks:
	1) Check for the Device-specific errors such as 'device-not-ready' or 'similar hardware problems' etc.
	2) Initialize the Device if it is being opened for the first time.
	3) Check the permissions (O_RDONLY, O_WRONLY, O_RDWR etc) for the file being opened.
	4) Identify the Minor number and update the 'f_op' Pointer, if necessary.
	5) Allocate and fill any Data Structure to be put in the 'private_data' field.
	6) Update the 'f_pos' field, if necessary.
	7) Increment the Usage-count.
3. The 'open' System-call flow is as follows:
	1) The User-space executes 'open' call.
	2) The glibc wrapper calls the 'syscall' wrapper.
	3) The Kernel-space calls the System-call Handler 'sys_open' / 'sys_openat'.
	4) The Handler calls the Kernel functions:
		=> do_sys_open() / do_sys_openat2()
			|
			V
		=> do_filp_open() ---> The 'struct file' is created.
			|
                        V
		=> path_openat() ---> The core path resolution logic.
			|
                        V
		=> do_open()
			|
                        V
		=> vfs_open()
			|
                        V
		=> do_dentry_open() ---> The 'struct file' fields are initialized and the field 'f_op' is initialized with the field 'i_fop'.
			|
                        V
		=> chrdev_open() ---> The 'struct cdev' is retrieved based on the registered Device number and the field 'f_op' is initialized with the field 'ops'.
			|
                        V
		=> filp->f_op->open() ---> The Driver's 'open' function is called.
			|
			V
		=> do_sys_open() / do_sys_openat2() ---> The 'fd' for the open file is returned to the User-space.
	5) The Kernel functions are defined in the following files:
		=> <fs/open.c>
		=> <fs/namei.c>
		=> <fs/char_dev.c>
4. The brief explanation for the above flow is:
	1) Whenever a Device file is created, the 'init_special_inode' is called to initialize the inode as follows:
		=> The field 'i_fop' is initialized with a default file operation implementation based on the 'mode' argument i.e Char/Block/FIFO Device.
		=> The field 'i_rdev' is initialized with the Device number 'rdev' argument of the newly created Device file.
	2) The dummy default file operation for the Character Device is defined in the <fs/char_dev.c> file as follows:
		=> const struct file_operations def_chr_fops = {
			   .open = chrdev_open,
			   .llseek = noop_llseek,
		   };
	3) The 'do_filp_open' function creates the 'file' Structure to represent the open Device file.
	4) The 'do_dentry_open' function calls the default 'def_chr_fops' file operation which in turn calls the 'chrdev_open' open operation implementation.
	5) The 'chrdev_open' function is executed as follows:
		=> The field 'i_cdev' is NULL as 'init_special_inode' function doesn't initializes this field of the inode.
		=> The 'kobj_lookup' function is used to find the 'kobj' field of the 'cdev' Structure for the Device using the Device number 'i_rdev' argument in the 'cdev_map'.
		=> The 'container_of' Macro is used to retrieve a Pointer to the 'cdev' Structure using the 'kobj' field Pointer.
		=> This 'cdev' Structure is the one that gets added in the 'cdev_add' function while registering the Device.
		=> The 'i_cdev' field is then initialized with the 'cdev' Structure of the Device.
		=> The 'fops' is then initialized with the 'cdev' Structure field 'ops'. This is the file operations that can be performed on the Device.
		=> The 'replace_fops' function is used to replace the default file operations with the actual Driver file operations.
		=> Then, the Driver 'open' function is called to execute the 'open' System-call.
		=> Based on the return values from all the Kernel functions, the 'do_sys_openat2' function returns the file descriptor to the User-space.
5. The Minor number plays an important role in the Device being opened.
	1) The Kernel doesn't use the Minor number of the Device, so the Driver can use it at will.
	2) The different Minor numbers are used to access different Devices or to open the same Device in different ways.
6. The Driver never knows the name of the Device being opened. It just knows the Device number.
	1) The same Device can be provided new names by aliasing for convinience.
	2) If there are 2 Device files with the same Device numbers, they cannot be differentiated.
	3) The same effect can be obtained using a symbolic or hard link and the preferred way to implement aliasing is creating a symbolic link to the Device file.
7. The 'open' function prototype is:
	=> int open(struct inode *inode, struct file *filp);
	---> The return value if non-negative represents Success. The negative value represent Errors.
8. The 'open' function can be left empty or not defined i.e. it is optional.
9. The 'cdev' Structure (set up during the Char Device registration in scull) information is needed to identify the Device being opened.
	1) This information is obtained from the 'i_cdev' field of the 'inode' Structure argument.
	2) However, the the desired information here is not the 'cdev' Structure itself but the 'scull_dev' Structure containing it.
	3) The 'container_of' Macro is used to return the Pointer to the required 'scull_dev' Structure.
	=> dev = container_of(inode->i_cdev, struct scull_dev, cdev);
	4) This 'dev' Pointer can then be stored in the 'private_data' field of the 'struct file' Structure.
10. There is no particular Device handling for the scull when opened.
	1) Specifically, there is no such action as 'initializing the Device on first open' because there is no count for the opening in the sculls.
	2) The only real operation performed on the Device is truncating it to a length of 0 when the Device is opened for writing only.
	3) It is performed because by design, overwriting a scull Device with a shorter file results in a shorter Device data area.
	=> if ((filp->f_flags & O_ACCMODE) == O_WRONLY) {
		   scull_trim(dev);
	   }
	4) There is no such operation required if the Device is opened for reading only.

release Function:
*****************
1. The 'release' function is provided for a Driver to reverse the operations done in 'open' function.
2. Generally, it performs the following tasks:
	1) Deallocate any Data Structure that is allocated in the 'private_data' field.
	2) Shut down the Device on last 'close' System-call on the Device file.
3. The Kernel keeps a counter of the number of times a 'struct file' Structure is being used.
	1) Every time a file descriptor is duplicated using the 'dup' and 'fork' System-calls, the counter is incremented.
	2) When a file descriptor is closed, the counter is decremented.
	3) When the counter reaches 0, the 'struct file' Structure is freed from the Memory using the 'release' function.
	4) Therefore, not every 'close' System-call invokes the 'release' function.
	5) The 'release' function is called when all the refrences to an opened file is closed.
	6) The 'f_ref' field of the 'struct file' Structure is used to handle reference counting.
4. The 'close' System-call flow is as follows:
	1) The User-space executes 'open' call.
	2) The glibc wrapper calls the 'syscall' wrapper.
	3) The Kernel-space calls the System-call Handler 'sys_close'.
	4) 4) The Handler calls the Kernel functions:
		=> file_close_fd() ---> The 'struct file' is retrieved.
			|
			V
		=> filp_flush()
			|
			V
		=> fput_close_sync() ---> The logic to synchronously close and release the 'struct file'.
			|
			V
		=> __fput() ---> The last reference of the 'struct file' is released.
			|
			V
		=> filp->f_op->release() ---> The Driver's 'release' function is called.
	5) The Kernel functions are defined in the following files:
		=> <fs/file_table.c>
		=> <fs/open.c>
		=> <fs/file.c>
		=> <include/linux/file_ref.h>
5. The 'flush' function is called everytime a 'close' System-call is executed in the User-space. However, rarely the 'flush' function is implemented in the Drivers.
	=> The reason being there is nothing to be performed at the 'close' call unless the 'release' or the last 'close' is executed.
6. Even if the 'close' System-call is not called by the User-space, the Kernel automatically calls it internally during the exit time.
7. The 'release' function prototype is:
	=> int release(struct inode *inode, struct file *filp);
	---> The return value if non-negative represents Success. The negative value represent Errors.
8. There is no particular Device handling for the scull when released.

read Function:
**************
1. The 'read' function is provided for a Driver to handle the read requests from the User-space i.e. to read the data from the Device.
2. Generally, it performs the following tasks:
	1) Access the Device data i.e. data from the Buffer or Memory on the Device.
	2) Copy this data from the Kernel-space to the User-space Buffer with a return value depicting the number of bytes read.
3. The 'read' System-call flow is as follows:
	1) The User-space executes 'read' call.
	2) The glibc wrapper calls the 'syscall' wrapper.
	3) The Kernel-space calls the System-call Handler 'sys_read'.
	4) The Handler calls the Kernel functions:
		=> ksys_read() ---> The 'struct file' is retrieved.
			|
			V
		=> vfs_read() ---> The 'struct file' validation logic.
			|
			V
		=> filp->f_op->read() ---> The Driver's 'read' function is called.
			|
			V
		=> copy_to_user() ---> The number of bytes read are returned to the User-space.
	5) The Kernel functions are defined in the following files:
		=> <fs/read_write.c>
		=> <include/linux/uaccess.h>
4. The 'read' function writes the data to the User-space Buffer. Therefore, it cannot be directly de-referenced in the Kernel-space.
	1) Depending on the architecture the Driver is running and how the Kernel is configured, the User-space Pointer may be invalid in the Kernel-space.
	2) The User-space Memory is paged. So, attempting to reference it directly from the Kernel-space may generate a Page-fault.
	3) The Pointer supplied by the User-space could possibly be buggy or malicious. This could compromise the security of the Kernel.
5. Obviously, the Driver must be able to access the User-space Buffer in order to get the job done. It is done with the help of special Kernel function.
	1) The 'copy_to_user' function is used to handle the data copy from the Kernel-space to the User-space safely.
		=> It validates the User-space Pointer. If it finds the Pointer invalid, no data copy is performed.
		=> If an invalid Address is encountered in between, it halts the data copy.
	2) The 'copy_to_user' function prototype is:
		=> static __always_inline unsigned long __must_check copy_to_user(void __user *to, const void *from, unsigned long n);
		---> The return value 0 represents Success. Any other value represents Errors.
		---> Typically, the non-zero return value is the amount of data that could not be copied.
	3) It is defined in the Header file <linux/uaccess.h>.
6. After a successful 'read' System-call, the current file position must be updated by the amount of data read by the Driver.
	1) The Kernel propogates the updated file position to the 'struct file' Structure field in the 'ksys_read' function.
7. The 'read' function prototype is:
        => ssize_t read(struct file *filp, char __user *buf, size_t count, loff_t *f_pos);
        ---> The 'buf' is the User-space Buffer, 'count' is the requested bytes and the 'f_pos' is the current file position from which the read operation is executed.
        ---> The return value is interpreted as follows:
                => If the value is equal to the 'count' argument passed, the requested number of bytes is transferred.
                => If the value is less than the 'count' argument passed, only a part of the data requested is transferred.
                => If the value is 0, EOF is reached i.e. no data can be transferred.
                => If the value is negative, there is an Error.
8. Each invocation of scull 'read' call deals with a single data quantum only, without implementing a loop to gather all the data.
	1) If there is a request for more data, the 'read' call is reiterated.
9. The scull can take advantage of the above partial-read rules while implementing the 'read' function.
	1) If the current read position 'f_pos' is greater than the Device file size, the 'read' function returns 0 to signal that there’s no data available i.e. EOF.
		=> if (*f_pos >= dev->size)
			   return 0;
	2) If the 'count' from the current read position is causing the EOF, the 'count' must be updated.
		=> if (*f_pos + count > dev->size)
			   count = dev->size - *f_pos;
10. The scull must be able to find calculate the position within the Device: the correct 'qset', how far in the 'qset' and the correct 'quantum' byte position in the 'qset'.
	=> int itemsize = quantum * qset;
	=> item = (long)*f_pos / itemsize;
	=> rest = (long)*f_pos % itemsize;
	=> s_pos = rest / quantum;
	=> q_pos = rest % quantum;
11. The scull then traverses the Linked-List to the correct 'qset' based on the above calculations.
	=> dptr = scull_follow(dev, item);
12. The scull must perform the sanity checks whether the data block exists or not in the 'quantum'. Also, it prevents reading from unallocated Memory.
	=> if (dptr == NULL || !dptr->data || ! dptr->data[s_pos])
		   return 0;	/* don't fill holes */
13. The scull limits the reading to the end of the 'quantum' only by adjusting the 'count'.
	=> if (count > quantum - q_pos)
		   count = quantum - q_pos;
14. The scull performs the transfer of data from the Kernel-space to the User-space and updates the current file position after the read operation.
	=> if (copy_to_user(buf, dptr->data[s_pos] + q_pos, count)) {
		   retval = -EFAULT;
		   goto out;
	   }
	   *f_pos += count;
15. The scull finally returns the number of bytes read after the 'read' operation.
	=> retval = count;

write Function:
***************
1. The 'write' function is provided for a Driver to handle the write requests from the User-space i.e. to write the data on the Device.
2. Generally, it performs the following tasks:
	1) Copy the data from the User-space Buffer to the Kernel-space and process it based on the Device logic.
	2) Send the data to the Device and return a value depicting the number of bytes written.
3. The 'write' System-call flow is as follows:
	1) The User-space executes 'write' call.
	2) The glibc wrapper calls the 'syscall' wrapper.
	3) The Kernel-space calls the System-call Handler 'sys_write'.
	4) The Handler calls the Kernel functions:
		=> ksys_write() ---> The 'struct file' is retrieved.
			|
			V
		=> vfs_write() ---> The 'struct file' validation logic.
			|
			V
		=> filp->f_op->write() ---> The Driver's 'write' function is called.
			|
			V
		=> copy_from_user() ---> The number of bytes written are returned to the User-space.
	5) The Kernel functions are defined in the following files:
		=> <fs/read_write.c>
		=> <include/linux/uaccess.h>
4. The 'write' function receives the data from the User-space Buffer. Therefore, it cannot be directly de-referenced in the Kernel-space.
	1) Depending on the architecture the Driver is running and how the Kernel is configured, the User-space Pointer may be invalid in the Kernel-space.
	2) The User-space Memory is paged. So, attempting to reference it directly from the Kernel-space may generate a Page-fault.
	3) The Pointer supplied by the User-space could possibly be buggy or malicious. This could compromise the security of the Kernel.
5. Obviously, the Driver must be able to access the User-space Buffer in order to get the job done. It is done with the help of special Kernel function.
	1) The 'copy_from_user' function is used to handle the data copy from the User-space to the Kernel-space safely.
		=> It validates the User-space Pointer. If it finds the Pointer invalid, no data copy is performed.
		=> If an invalid Address is encountered in between, it halts the data copy.
	2) The 'copy_from_user' function prototype is:
		=> static __always_inline unsigned long __must_check copy_from_user(void *to, const void __user *from, unsigned long n);
		---> The return value 0 represents Success. Any other value represents Errors.
		---> Typically, the non-zero return value is the amount of data that could not be copied.
	3) It is defined in the Header file <linux/uaccess.h>.
6. After a successful 'write' System-call, the current file position must be updated by the amount of data written by the Driver.
	1) The Kernel propogates the updated file position to the 'struct file' Structure field in the 'ksys_write' function.
7. The 'write' function prototype is:
	=> ssize_t write(struct file *filp, const char __user *buf, size_t count, loff_t *f_pos);
	---> The 'buf' is the User-space Buffer, 'count' is the bytes to be written and the 'f_pos' is the current file position from which the write Operations is executed.
	---> The return value is interpreted as follows:
		=> If the value is equal to the 'count' argument passed, the requested number of bytes is transferred.
		=> If the value is less than the 'count' argument passed, only a part of the data requested is transferred.
		=> If the value is 0, EOF is reached i.e. no data can be transferred.
		=> If the value is negative, there is an Error.
8.Each invocation of scull 'write' call deals with a single data quantum only, without implementing a loop to gather all the data.
	1) If there is a request for more data, the 'write' call is reiterated.
9. The scull must be able to find calculate the position within the Device: the correct 'qset', how far in the 'qset' and the correct 'quantum' byte position in the 'qset'.
	=> int itemsize = quantum * qset;
	=> item = (long)*f_pos / itemsize;
	=> rest = (long)*f_pos % itemsize;
	=> s_pos = rest / quantum;
	=> q_pos = rest % quantum;
10. The scull then traverses the Linked-List to the correct 'qset' based on the above calculations.
	=> dptr = scull_follow(dev, item);
11. The scull then allocates the Memory for the 'qset', if it is not allocated already.
	=> if (!dptr->data) {
		   dptr->data = kmalloc(qset * sizeof(char *), GFP_KERNEL);
		   if (!dptr->data)
			   return 0;
		   memset(dptr->data, 0, qset * sizeof(char *));
	   }
12. The scull then allocates the Memory for the 'quantum', if it is not allocated already.
	=> if (!dptr->data[s_pos]) {
		   dptr->data[s_pos] = kmalloc(quantum, GFP_KERNEL);
		   if (!dptr->data[s_pos])
			   return 0;
13. The scull limits the reading to the end of the 'quantum' only by adjusting the 'count'.
	=> if (count > quantum - q_pos)
		   count = quantum - q_pos;
14. The scull performs the transfer of data from the User-space to the Kernel-space and updates the current file position after the write operation.
	=> if (copy_from_user(dptr->data[s_pos]+q_pos, buf, count)) {
		   retval = -EFAULT;
		   goto out;
	   }
	   *f_pos += count;
15. The scull finally returns the number of bytes written after the 'write' operation and updates the size of the data stored on the Device.
	=> retval = count;
	=> if (dev->size < *f_pos)
		   dev->size = *f_pos;

llseek Function:
****************
1. The 'llseek' function is provided for a Driver to update the file position based on a given offset and a reference point.
2. Generally, it performs the following tasks:
	1) Interprets the offset value and the reference point to adjust the file position in the 'struct file' Structure.
	2) Performs the boundary checks to ensure the new file position is valid.
3. The 'lseek' System-call flow is as follows:
	1) The User-space executes 'write' call.
	2) The glibc wrapper calls the 'syscall' wrapper.
	3) The Kernel-space calls the System-call Handler 'sys_lseek'.
	4) The Handler calls the Kernel functions:
		=> ksys_lseek() ---> The 'struct file' is retrieved and the refrence point is validated.
			|
			V
		=> vfs_llseek()
			|
			V
		=> filp->f_op->llseek() ---> The Driver's 'llseek' function is called.
	5) The Kernel functions are defined in the following file:
		=> <fs/read_write.c>
