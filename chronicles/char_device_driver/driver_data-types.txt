Important Data-types for File Operations:
=========================================

Structure 'file_operations':
****************************
1. The Structure Data-type 'file_operations' contains the collection of Pointers to functions defined by the Driver that perform various operations on the Device.
2. It is defined in the Header file <linux/fs.h>.
3. The field 'struct module *owner' is the first field of the 'file_operations'.
	1) The Structure Data-type 'struct module' defined in the Header file <linux/module.h>.
	2) It is not an operation but the Pointer to the Module that owns the Structure.
	3) It is used to prevent the Module from being unloaded while the Device is being used.
	4) It is simply initialized to the value 'THIS_MODULE'.
4. The field 'llseek' is provided to contain the Driver function to allow for seeking within the file.
	1) When the User-space uses 'lseek' System-call on the Device file in "/dev", this function handles the logic for updating the file position.
	2) It manages the 64-bit extended file Pointer for the precise file positioning based on the provided offset and starting point in 'lseek' call.
	3) The 'llseek' function prototype is:
		=> loff_t (*llseek) (struct file *, loff_t, int);
		---> The new file position is returned from the function as a 'long offset' that is 64-bit wide. The negative values represent Errors.
	4) If this is NULL, the 'lseek' System-call will modify the file position in potentially unpredictable ways.
5. The field 'read' is provided to contain the Driver function to retrieve data from the Device.
	1) When the User-space uses 'read' System-call on the Device file in "/dev", this function handles the read operation.
	2) It handles the low-level details of accessing the registers, managing the Interrupts and buffering the data.
		=> The requested data is copied from the Device's Memory into a Buffer in the Kernel Memory.
		=> The Driver then uses the "copy_to_user" function to copy the data from the Kernel-space to the User-space.
			---> unsigned long copy_to_user(void *to, const void *from, unsigned long count);
	3) The 'read' function prototype is:
		=> ssize_t (*read) (struct file *, char __user *, size_t, loff_t *);
		---> The return value is of 'signed size' type. A non-negative return value represents the number of data bytes read successfully.
		---> The negative value represent Errors. If some data is read and then the Error occurs, the return value is less than the requested data.
	4) If this is NULL, the 'read' System-call fails with an 'invalid argument' Error (-EINVAL).
6. The field 'write' is provied to contain the Driver function to send data to the Device.
	1) When the User-space uses 'write' System-call on the Device file in "/dev", this function handles the write operation.
	2) It handles the low-level details of accessing the registers, managing the Interrupts and buffering the data.
		=> The Driver uses the "copy_from_user" function to copy the data from the User-space to the Kernel-space.
			---> unsigned long copy_from_user(void *to, const void *from, unsigned long count);
		=> The Driver translates the data and instructions into a format that the Device understands.
		=> The Driver initiates the write operation such as writing to Memory, sending data to a Peripheral or controlling a HW function.
	3) The 'write' function prototype is:
		=> ssize_t (*write) (struct file *, const char __user *, size_t, loff_t *);
		---> The return value is of 'signed size' type. A non-negative return value represents the number of data bytes written successfully.
		---> The negative value represent Errors. If some data is written and then the Error occurs, the return value is less than the sent data.
	4) If this is NULL, the 'write' System-call fails with an 'invalid argument' Error (-EINVAL).
7. The field 'poll' is provided to contain the Driver function to poll the Device for the requested I/O operations.
	1) When the User-space uses 'poll', 'epoll' or 'select' System-calls on the Device file in "/dev", this function handles the polling operation.
		=> It checks whether the Device is ready for any of the requested I/O operations (read, write, or exception).
		=> If the Device is not ready, it adds wait queues to the 'poll_table_struct' for those events.
		=> It provides the Kernel with information that can be used to put the calling process to sleep until I/O operations becomes possible.
	2) It should return a bitmask of event flags indicating whether the non-blocking I/O operations are possible currently.
	3) The 'poll' function prototype is:
		=> __poll_t (*poll) (struct file *, struct poll_table_struct *);
		---> The return type of the bitmask of event flags is '__poll_t' indicating the readiness of the Device for the I/O operations.
	4) If this is NULL, the Device is assumed to be always readable and writable without blocking.
8. The field 'unlocked_ioctl' is provided to contain the Driver function to issue Device-specific commands.
	1) When the User-space uses 'ioctl' System-call on the Device file in "/dev", this function handles the way to provide I/O and control operations.
		=> The 'ioctl' call used to run under the Big Kernel Lock (BKL). It used to lock the whole Kernel during it's operation.
		=> The usage of BKL made it possible for the long-running 'ioctl' calls to create long latencies for unrelated processes.
		=> The 'ioctl' call is a powerful mechanism for User-space applications to control the behavior of Devices.
		=> However, it was seen as a completely uncontrolled entry point to the Kernel-space.
	2) The new way to implement this function is introduced which doesn't lock the Kernel during the operation.
		=> The request code (an integer) is passed that determines the specific action to be performed on the Device.
	3) The 'unlocked_ioctl' function prototype is:
		=> long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long);
		---> The return value if non-negative represents Success. The negative value represent Errors.
	4) If this is NULL, the 'ioctl' System-call returns an Error for any request (that is not pre-defined) i.e. no such Device 'ioctl' (-ENOTTY).
9. The field 'compat_ioctl' is provided to contain the Driver function to maintain compatiblity to 'ioctl' calls.
	1) It is unrelated to 'unlocked_ioctl' function implementation.
	2) The purpose of this implementation is to allow 32-bit User-space applications to generate 'ioctl' calls on 64-bit Kernel.
		=> It should do the required conversion of the arguments to the native Data-types and carry out the request.
	3) The 'compat_ioctl' function prototype is:
		=> long (*compat_ioctl) (struct file *, unsigned int, unsigned long);
	4) If this is NULL, the Data Structures must be compatible for both 32-bit and 64-bit Kernels and the 'unlocked_ioctl' implementation must be used.
10. The field 'mmap' is provided to contain the Driver function to perform the Memory mapping for the Devices.
	1) When the User-space uses 'mmap' System-call on the Device file in "/dev", this function handles the process to map the Devices into Memory.
		=> The Memory mapped file I/O can be accessed and modified as if they are directly in the Memory.
		=> It eliminates the need for traditional 'read' and 'write' System-calls. It is faster and more efficient.
		=> It uses demand Paging i.e. the file contents are loaded in the Memory when they are accessed (useful for very large files).
	2) It is often used to create Shared Memory regions between processes.
		=> Multiple processes can map the same file into their Address spaces, allowing them to share data efficiently without using traditional IPC mechanisms.
	3) The 'mmap' function prototype is:
		=> int (*mmap) (struct file *, struct vm_area_struct *);
		---> The 'struct vm_area_struct' argument is used to indicate the Virtual Address space where the Memory should be mapped by the Device.
		---> When the 'mmap' is used to modify the files, it is crucial to synchronize (fsync/msync) the changes back to the file on Disk to ensure data persistence.
	4) If this is NULL, the 'mmap' System-call returns Error (-ENODEV).
---------------------------
11. The field 'open' is provided to contain the Driver function to perform the initial access of the Device along with initializations and setting up resources.
	1) When the User-space uses 'open' System-call on the Device file in "/dev", this function establishes connection to the Device file.
	2) The Kernel VFS processes receives the 'open' System
		=> The VFS performs the initialization of a Structure Data-type 'struct file' and links it to the corresponding Structure Data-type 'struct inode'.
		=> The VFS then calls this 'open' function (pointing to the associated Driver 'open' implementation) to perform the opening on the Device.
		=> On successful 'open', the VFS assigns a file descriptor and returns it to the User-space.
	3) The 'open' function prototype is:
		=> int (*open) (struct inode *, struct file *);
	4) If this is NULL, the 'open' System-call always succeeds but the Driver isn’t notified.
---------------------------
12. The field 'flush' is provided to contain the Driver function to perform the 'flushing' on the Device.
	1) When the User-space uses 'close' System-call on the Device file in "/dev", this function handles the closing of the copy of the file descriptor wrt a process.
	2) The Kernel invokes this function internally if it is implemented. It is called whenever a file descriptor is closed.
		=> The order is: close(fd) ---> sys_close() ---> filp_close() ---> file_operations.flush
		=> It's similar to 'release', but it’s guaranteed to be called once per file descriptor close.
		=> It is used to flush any pending data, clean up resources, flush caches, or finalize I/O operations before a file descriptor is closed.
		=> This is very rarely used in the Drivers.
	3) The 'flush' function prototype is:
		=> int (*flush) (struct file *, fl_owner_t id);
		---> The 'fl_owner_t' argument identifies the owner of the file lock.
		---> The return value if non-negative represents Success. The negative value represent Errors.
	4) If this is NULL, the Kernel simply ignores the User-space 'close' System-call request.
---------------------------
13. The field 'release' is provided to contain the Driver function
---------------------------
14. The field 'fsync' is provided to contain the Driver function to perform the flushing of the pending data to the Device.
	1) When the User-space uses 'fsync'/'fdatasync' System-calls on the Device in "/dev", this function handles the back-end for flushing.
	2) The Kernel invokes this function to flush the file data and/or the meta-data to the Device based on the System-call from the User-space.
		=> This ensures data integrity by synchronizing the file contents and the meta-data to the storage Device.
	3) The 'fsync' function prototype is:
		=> int (*fsync) (struct file *, loff_t, loff_t, int datasync);
		---> The return value if non-negative represents Success. The negative value represent Errors.
		---> The 'datasync' argument decides the contents to be flushed.
		=> The 'fsync' call sets the 'datasync' argument to '0' and flushes all the data and the meta-data of the Device file.
		=> The 'fdatasync' call sets the 'datasync' argument to '1' and flushes only the file data and minimal meta-data required for data retrieval.
	4) If this is NULL, the 'fsync' and 'fdatasync' System-calls fail with an 'invalid argument' Error (-EINVAL).
15. The field 'fasync' is provided to contain the Driver function to perform the asynchronous notification setup on the Device.
	1) When the User-space uses the 'fcntl' System-call on the Device file in "/dev", this function notifies the Device about a change in FASYNC flag.
	2) The Kernel invokes this function and passes the flags 'F_SETFL' and 'O_ASYNC' to set up the asynchronous notification mechanism.
		=> It allows User-space to be notified via signals when the Device becomes ready for I/O.
	3) The 'fasync' function prototype is:
		=> int (*fasync) (int, struct file *, int);
		---> The last argument is the mode i.e. non-zero value is to enable and zero is to disable the asynchronous notification.
		---> The return value if non-negative represents Success. The negative value represent Errors.
	4) If this is NULL, the 'fcntl' System-call will return Success only if the flag is being set but no signal is ever delivered from the Device.
		=> If the Driver does not support asynchronous mechanism, this function can be safely set to NULL.
16. The field 'lock' is provided to contain the Driver function to perform the advisory file locking.
	1) When the User-space uses the 'fcntl' System-call on the Device file in "/dev", this function handles the locking request.
	2) The Kernel invokes this function and passes the flags 'F_GETLK, 'F_SETLK' or 'F_SETLKW' as the locking command.
		=> This is very rarely used in the Drivers.
	3) The 'lock' function prototype is:
		=> int (*lock) (struct file *, int, struct file_lock *);
		---> The 'struct file_lock' argument describes the lock to be applied.
		---> The return value if non-negative represents Success. The negative value represent Errors.
	4) If this is NULL, the 'fcntl' System-call falls back to the default VFS-level locking behavior.
		=> If the file (a Device node, "/proc" entry or special file) requires custom lock handling and 'lock' is NULL, the locking might not behave correctly.

Structure 'file':
*****************
1. The Structure Data-type 'file' represents the specific 'open' file instance whenever a Device file is opened.
2. It is defined in the Header file <linux/fs.h>.
3. The field 'f_lock' is a declaration of a spinlock used for ensuring mutual exclusion in concurrent programming.
	1) A spinlock is a type of lock where the thread trying to acquire the lock will repeatedly check if it is available (i.e., 'spin') instead of blocking the thread.
	2) The spinlock is used to protect the critical sections of the code that cannot be executed concurrently on multiple threads.
	3) The declaration is:
		=> spinlock_t f_lock;
4. The field 'f_mode' is a declaration to define how the file shall be handled i.e. the mode in which the Device file is opened.
	1) The 'f_mode' variable holds the file mode or file access flags for a specific Device file.
	2) The flags used are:
		=> 'FMODE_READ' is the Read access for the file.
		=> 'FMODE_WRITE' is the Write access for the file.
		=> 'FMODE_APPEND' is the Append mode for the file.
		=> 'FMODE_EXEC' is the Execute access for the file.
		=> 'FMODE_NONBLOCK' is the Non-blocking mode for the file.
	3) The declaration is:
		=> fmode_t f_mode;
5. The field 'f_op' is a declaration of Pointer to the Structure of operations performed on the Device file.
	1) The System-calls generated for the Device file are mapped to the operations defined in this Structure.
	2) The declaration is:
		=> const struct file_operations *f_op;
		---> The 'const' declaration indicates that the Structure pointed by 'f_op' should not be modified.
6. The field 'f_mapping' is a declaration that defines how the Device file I/O interacts with the Page-Cache and Memory-mapped I/O.
	1) The 'f_mapping' Pointer allows the Device file to be associated with an Address space, which handles the operations like:
		=> The reading or writing Pages to and from the Disk.
		=> The handling of the Memory-mapped Device file I/O.
	2) The declaration is:
		=> struct address_space *f_mapping;
7. The field 'private_data' is a declaration that is useful to preserve the state information across System-calls.
	1) The generic 'private_data' Pointer is often used:
		=> To store a reference to some data which cannot be tied to a specific Data-type.
		=> To associate some arbitrary data with a Structure in callbacks or context switching.
	2) It can be NULL or point to some User-allocated data. However, if it is not NULL, the Memory being pointed should be freed in the 'release' function.
	3) The declaration is:
		=> void *private_data;
8. The field 'f_inode' is a declaration to store the meta-data about a Device file (such as ownership, permissions, time-stamps etc).
	1) The 'f_inode' Pointer accesses the 'struct inode' associated with the opened Device file. However, it does not stores the file name or file contents.
	2) It is very useful in the Device file manangement.
	3) The declaration is:
		=> struct inode *f_inode;
9. The field 'f_flags' is a declaration to hold the various bitwise file flags of the Device.
	1) The 'f_flags' variable store the flag values that indicate the state or access mode of the Device file.
		=> Each bit in the variable can represent a different flag (such as O_RDONLY, O_WRONLY, O_RDWR etc).
		=> They are often set or checked using the bitwise operations.
	2) These flags are defined in the Header file <linux/fcntl.h>.
	3) The declaration is:
		=> unsigned int f_flags;
10. The field 'f_owner' is a declaration that is used for tracking the ownership information of the Device file descriptor.
	1) The 'f_owner' Pointer accesses the Structure that allows the Kernel to know which process should receive the notifications related to the particular file descriptor.
	2) The declaration is:
		=> struct fown_struct *f_owner;
11. The field 'f_path' is a declaration that is used for resolving the file paths.
	1) The 'f_path' Structure contains the fields for 'dentry' (directory entry) and 'vfsmount' (VFS mount point).
		=> It is used to identify a specific location in the VFS.
	2) It is very useful in resolving file paths during file open operations, symbolic link resolutions etc.
	3) The declaration is:
		=> struct path f_path;
12. The field 'f_pos' field is a declaration to represent the current Device file offset.
	1) The 'f_pos' variable value is read by the Driver to know the current position in the Device file.
		=> Only the R/W operations and the 'llseek' System-call are able to modify this variable.
	2) The declaration is:
		=> loff_t f_pos;
13. This Structure 'file' is not related to the 'FILE' Pointers in C-programs.
	=> The 'FILE' is defined in the C-Library and these Pointers never appear in the Kernel programs.
	=> The 'struct file' is a Kernel Structure and it is never used in the User programs.
14. The 'struct file' is created by the Kernel on 'open' System-call and passed to all the functions operating on the Device file.
15. After all the instances of the Device file are closed, the Kernel releases this Data Structure.
16. Conventionally, the 'struct file' variable is called 'file'. The Pointer to the Structure is called 'filp' (file Pointer).

Structure 'inode':
******************
1. The Structure Data-type 'inode' contains the meta-data to uniquely identify a file. The 'inode' is short form for 'index node'.
2. It is defined in the Header file <linux/fs.h>.
3. The field 'i_mode' is a declaration to represent the file type and access permissions of an inode.
	1) The 'i_mode' variable encodes the following:
		=> The File type (regular file, directory, symbolic link etc).
		=> The Permissions (read / write / execute for User, Group, Others).
	2) The declaration is:
		=> umode_t i_mode;
		---> The Macros (such as S_IFREG, S_IFDIR, S_IRUSR, S_IWUSR, S_IXUSR etc) are defined in the Header file <uapi/linux/stat.h>.
4. The field 'i_uid' is a declaration to represent the User ID for the Device file owner.
	1) The 'i_uid' variable is used by the Kernel to manage the 'uid's securely and properly across the different User name-spaces.
	2) It helps the Kernel to determine the file ownership that is essential for enforcing the access permissions and audit logging.
	3) The declaration is:
		=> kuid_t i_uid;
5. The field 'i_gid' is a declaration to represent the Group ID for the Device file owner.
	1) The 'i_gid' variable is used by the Kernel to manage the 'gid's securely and properly across the different User name-spaces.
	2) It helps the Kernel to handle the translation of the IDs in a secure and isolated way.
	3) The declaration is:
		=> kgid_t i_gid;
6. The field 'i_flags' is a declaration to store a set of bitwise flags.
	1) The 'i_flags' is typically used as a Bit-field to represent the multiple boolean options compactly.
	2) The declaration is:
		=> unsigned int i_flags;
7. The field 'i_op' is a declaration to access the set of operations that can be performed on an inode.
	1) The 'i_op' Pointer references to the 'struct inode_operations' Structure that define the operations.
		=> The set of operations for an inode differ depending on the type of file (e.g., regular file, directory, symbolic link etc) and the file-system.
	2) The declaration is:
		=> const struct inode_operations *i_op;
		---> The 'const' declaration indicates that the Structure pointed by 'i_op' should not be modified.
8. The field 'i_sb' is a declaration that allows the inode to have access of the global information about the file-system where the inode belongs.
	1) The 'i_sb' Pointer references to the 'struct super_block' Structure that contains the details of the superblock of the file-system.
	2) The declaration is:
		=> struct super_block *i_sb;
9. The field 'i_mapping' is a declaration that defines how the Device file I/O interacts with the Page-Cache and Memory-mapped I/O.
	1) The 'i_mapping' Pointer allows the inode to be associated with Address space.
		=> For R/W operations on a file, the Kernel checks the Page-Cache via 'i_mapping'.
		=> The 'mmap' function uses 'i_mapping' to map the file's contents
	2) This is very crucial for the performance and Memory management.
	3) The declaration is:
		=> struct address_space *i_mapping;
10. The field 'i_rdev' is a declaration that stores the actual Device number of the Device file.
	1) The 'i_rdev' variable holds the Device number i.e. the combination of the Major and Minor numbers.
	2) It is only meaningful when the inode represents a Device file.
	3) The declaration is:
		=> dev_t i_rdev;
11. The field 'i_size' is a declaration that represents the size of a file in bytes.
	1) The 'i_size' variable is used by the file-system to keep track of how large the file is.
	2) It is updated during the R/W operations to reflect the current size.
	3) The declaration is:
		=> loff_t i_size;
12. The fields 'i_atime_sec', 'i_mtime_sec' and 'i_ctime_sec' are declarations to store the time-stamp details of the inode.
	1) The various variables store the following details:
		=> 'i_atime_sec' represents the access time 'atime' in seconds for an inode.
		=> 'i_mtime_sec' represents the modification time 'mtime' (time when the file contents are modified) in seconds for an inode.
		=> 'i_ctime_sec' represents the change time 'ctime' (time when the file's meta-data are changed) in seconds for an inode.
	2) The declarations are:
		=> time64_t i_atime_sec;
		=> time64_t i_mtime_sec;
		=> time64_t i_ctime_sec;
		---> The 'time64_t' Data-type is a 64-bit signed integer to store time values in seconds. It is designed to avoid the 'Year 2038' problem.
13. The fields 'i_atime_nsec', 'i_mtime_nsec' and 'i_ctime_nsec' are declarations to store the nano-seconds portion of the time-stamp details of the inode.
	1) The various variables store the following details:
		=> 'i_atime_nsec' represents the nano-seconds portion of the last access time 'atime' for an inode.
		=> 'i_mtime_nsec' represents the nano-seconds portion of the last modification time 'mtime' for an inode.
		=> 'i_ctime_nsec' represents the nano-seconds portion of the last change time 'ctime' for an inode.
	2) The declarations are:
		=> u32 i_atime_nsec;
		=> u32 i_mtime_nsec;
		=> u32 i_ctime_nsec;
---------------------------
x. There can be numerous 'struct file' Structures representing multiple open descriptors for the same Device file i.e. the same file can be opened multiple times.
x. However, all the 'struct file' Structures representing the same opened file points to the single 'struct inode' Structure.
x. The unique thing about 'inode' is they contain the information about the Device file without having any information about the file name.
