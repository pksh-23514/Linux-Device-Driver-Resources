Device Registration in the scull:
=================================

scull Structure:
****************
1. Internally, the scull represents each Device with a Structure Data-type 'struct scull_dev'.
	=> struct scull_dev {
		   struct scull_qset *data;	/* The Pointer to the first quantum set */
		   int quantum;			/* The current quantum size */
		   int qset;			/* The current Array size */
		   unsigned long size;		/* The amount of data stored here */
		   struct mutex lock;		/* The Mutex lock */
		   struct cdev cdev;		/* The Char Device Structure */
	   };
2. The 'struct scull_qset' Structure Data-type is represented as:
	=> struct scull_qset {
		   void **data;
		   struct scull_qset *next;
	   };
	---> The 'data' is a Pointer to an Array of Pointers that point to the Memory areas i.e. 'quantum'.
	---> The size of 'data' Pointer i.e. number of Pointers is defined by the field 'qset' in the 'scull_dev' Structure.
	---> Each Pointer in 'data[]' points to a Memory area of size defined by the field 'quantum' in the 'scull_dev' Structure.
	---> The 'next' is a Pointer to the next 'scull_qset' Structure allowing the creation of the Linked-List of Quantum Sets.
	---> The visual representation is:
		=> scull_dev
			|
			V
		   +------------+
		   | scull_qset | ---> next ---> [scull_qset] ---> ... --->
		   |------------|
		   |    data  --|----> | ptr | ptr | ptr | ...
		   +------------+

Char Device Registration Implementation:
****************************************
1. The 'cdev' Structure is embedded within the 'scull_dev' Structure.
2. Therefore to initialize the 'cdev' Structure using the 'cdev_init' function, the 'scull_dev' Structure field shall be used.
	=> cdev_init(&dev->cdev, &scull_fops);
3. To register the 'cdev' Structure with the Kernel using the 'cdev_add' function, the same 'scull_dev' Structure field shall be used.
	=> err = cdev_add(&dev->cdev, dev, 1);
