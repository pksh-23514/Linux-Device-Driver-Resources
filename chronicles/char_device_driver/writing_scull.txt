Steps to Write the scull:
=========================

Dynamic Allocation of a Range of Device Numbers:
************************************************
1. The first step is to obtain one or more Device numbers.
2. The functions used are defined in the Header file <linux/fs.h>.
3. The Kernel API function to allocate the Major number (the Minor number is returned along with it) dynamically is:
	=> int alloc_chrdev_region(dev_t *dev, unsigned int baseminor, unsigned int count, const char *name);
	---> 'dev' is an output-only parameter that on successful execution holds the first number in the allocated range.
	---> 'baseminor' is the requested first minor number to use. It is usually zero.
	---> 'count' is the total number of contiguous Device numbers requested.
	---> 'name' is the Device name associated with the number range. This appears in the "/proc/devices" and "/sys" directories.
	---> The return value for the function: 0 is Success and Negative is Failure/Error.
4. For any new Drivers, it is strongly suggested to use the dynamic allocation of the Major Device number rather than choosing a number randomly that are free.
5. The Kernel API function to register a range of Device numbers is:
	=> int register_chrdev_region(dev_t first, unsigned int count, const char *name);
	---> 'first' is the beginning Device number in the desired range. It must include the Major number. The Minor number portion is not mandatory (often zero).
	---> 'count' is the total number of contiguous Device numbers requested.
	---> 'name' is the Device name associated with the number range. This appears in the "/proc/devices" and "/sys" directories.
	---> The return value for the function: 0 is Success and Negative is Failure/Error.
6. For this function to work well, the Device number must be known ahead of time. However, most of the time this is not the case.
7. The usual place to call this function would be in the Module's start function.

Character Device Registration:
******************************
1. The next step is to register the Char Device with the VFS before the Kernel can invoke the Device's operations.
2. The Kernel uses the Structure Data-type 'struct cdev' to represent the Char Devices internally. It is defined in the Header file <linux/cdev.h>.
	=> struct cdev {
		   struct kobject kobj;
		   struct module *owner;
		   const struct file_operations *ops;
		   struct list_head list;
		   dev_t dev;
		   unsigned int count;
	   } __randomize_layout;
3. Each Device being handled has a separate 'cdev' Structure.
4. Without registering the Device, the User-space System-calls cannot be mapped to the Device Driver operations.
5. The functions used are defined in the Header file <linux/cdev.h>.
6. The Kernel API function to initialize the Structure 'cdev' that is already allocated by the User is:
	=> void cdev_init(struct cdev *cdev, const struct file_operations *fops);
	---> 'cdev' is the Structure already defined by the User that holds the Device related information.
	---> 'fops' is the Structure that defines the operations that can be performed on the Device. The 'struct file_operations' is defined in the Header file <linux/fs.h>.
	---> There is no return value for the function.
7. This function does not allocate Memory, it expects a 'struct cdev' to already exist before the function call.
8. It sets up the Structure with default values and prepares it for the registration with the Kernel.
9. The Kernel API function to obtain a standalone Structure 'cdev' dynamically is:
	=> struct cdev *cdev_alloc(void);
	---> There is no argument required.
	---> The return value for the function is a Pointer to the allocated Structure 'cdev'.
10. This function allocates Memory for the Structure 'cdev' using 'kmalloc' (or similar Kernel Memory allocation functions).
11. It is especially helpful where the requirement is to register a dynamic number of Devices or when the Device Structure needs to be part of a larger Data-structure.
12. The command to use this function is as below:
	=> struct cdev *my_cdev = cdev_alloc();
13. In both the 'cdev' and 'file_operations' Structure, there is a field 'owner' that should be set to 'THIS_MODULE'.
14. This field is used to prevent the Module from being unloaded while the Device is being used.
15. 'THIS_MODULE' is a Macro that represents a Pointer to the current Module's 'struct module'. It is defined in the Header file <linux/init.h>.
	=> #ifdef MODULE
	   extern struct module __this_module;
	   #define THIS_MODULE (&__this_module)
	   #else
	   #define THIS_MODULE ((struct module *)0)
	   #endif
16. It is defined during the Build process of a Kernel Module. It is a way for the Kernel to track the Module having the ownership of a particular Device.
17. The Kernel API function to register the Char Device with the Kernel is:
	=> int cdev_add(struct cdev *dev, dev_t dev, unsigned int count);
	---> 'cdev' is the Structure that holds the Device related information.
	---> 'dev' is the first Device number for which the Device is responsible (obtained from the 'alloc_chrdev_region' function).
	---> 'count' is the total number of contiguous Device numbers.
	---> The return value for the function: 0 is Success and Negative is Failure/Error.
18. This function makes the Device ready to be accessed by the User-space applications. Thus, the Device becomes visible in "/proc/devices" and "/sys" directories.
19. It adds the Device to the Kernel's internal hash table 'cdev_map' for the Kernel to locate and manage the Device.
20. However, it does not create the Device nodes itself in "/dev" directory. Also, the function 'cdev_init' must be called before this function call.
21. As soon as the 'cdev_add' function returns, the Device is live i.e. the Device is immediately available for access and it's operations can be called.
22. The usual place to call this function would be in the Module's start function.

Device Class Creation:
**********************
1. The next step is to create a Device class to which the Device belongs in the VFS.
2. In Linux, the "/sys" directory exposes the Device configurations and information to the User-space.
3. A Device class is an abstraction which the Kernel uses to group together all the similar types of Devices.
4. They do not necessarily reflect the same physical layout but have similar functionalities (such as all the Block Devices, Input Devices, Network interfaces etc).
5. The "/sys/class" is a part of the VFS provided by the Kernel.
	1) Each sub-directory in the "/sys/class" corresponds to a Device class like 'block', 'net', 'tty' etc.
	2) These sub-directories contain symbolic links to the actual Device objects in "/sys/devices".
	3) These Device objects contain attributes like 'dev', 'subsystem', 'device', 'uevent' etc.
6. The Kernel API function to create a Device class under the "/sys/class" is:
	=> struct class * __must_check class_create(const char *name);
	---> 'name' is the name of the class. It appears with the same name in the "/sys/class".
	---> The return value for the function: Pointer to the 'struct class' is Success and ERR_PTR is Failure.
	---> It is defined in the Header file <linux/device/class.h>.
7. The usual place to call this function would be in the Module's start function.

Device File Creation:
*********************
1. The next step is to create the Device file representing the actual Device in the "/dev" directory.
2. It is a special file or a node in Linux that act as an interface between User Programs and HW Device.
3. They are created dynamically by the 'udev' by taking the information from the "/sys" and applying the necessary 'udev' rules.
4. The Kernel API function to create and export all the information regarding the Device is:
	=> struct device *device_create(const struct class *cls, struct device *parent, dev_t devt, void *drvdata, const char *fmt, ...);
	---> 'class' is the Pointer to the Device class. It is created with the function 'class_create'.
	---> 'parent' is the Pointer to the Parent Device (if the Device is the child of some Parent Device). It can be NULL.
	---> 'devt' is the Device number.
	---> 'drvdata' is the Driver-specific data associated with the Device.
	---> 'fmt' is the format String containing the Device name.
	---> The return value for the function: Pointer to the 'struct device' is Success and ERR_PTR is Failure.
	---> It is defined in the Header file <linux/device.h>.
5. The usual place to call this function would be in the Module's start function.

Character Driver File Operation Methods:
****************************************
1. The Char Device Drivers have operations that provide implementations to the User-space System-calls such as open, read, write, close, llseek etc.
2. The Structure Data-type 'file_operations' contains the collection of Pointers to functions defined by the Driver that perform various operations on the Device.
3. The 'struct file_operations' is defined in the Header file <linux/fs.h>.
	=> struct file_operations {
		   struct module *owner;
		   fop_flags_t fop_flags;
		   loff_t (*llseek) (struct file *, loff_t, int);
		   ssize_t (*read) (struct file *, char __user *, size_t, loff_t *);
		   ssize_t (*write) (struct file *, const char __user *, size_t, loff_t *);
		   ...
		   __poll_t (*poll) (struct file *, struct poll_table_struct *);
		   long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long);
		   long (*compat_ioctl) (struct file *, unsigned int, unsigned long);
		   int (*mmap) (struct file *, struct vm_area_struct *);
		   int (*open) (struct inode *, struct file *);
		   int (*flush) (struct file *, fl_owner_t id);
		   int (*release) (struct inode *, struct file *);
		   int (*fsync) (struct file *, loff_t, loff_t, int datasync);
		   int (*fasync) (int, struct file *, int);
		   int (*lock) (struct file *, int, struct file_lock *);
		   ...
	   } __randomize_layout;
4. Conventionally, the 'struct file_operations' variable or the Pointer to the Structure is called 'fops' (or some variation).
5. Each field in the Structure must point to a specific function or left as NULL for unsupported operations.
6. There are a number of operations that have a parameter with including '__user'. This is defined in the Header file <linux/compiler_types.h>.
	=> # define __user	__attribute__((noderef, address_space(__user)))
	1) It notes that the Pointer is a User-space Address that cannot be directly de-referenced.
	2) It allows tools like 'sparse' to tell Kernel developers/system that they're possibly using an untrusted Pointer (invalid in the current Virtual Address mapping).
	3) For normal compilation, it has no effect but it can be used by external checking SW to find the misuse of User-space Addresses.
7. The User-space System-calls are used on the Device file. These calls are then transferred to the Kernel which processes them through the VFS.
8. The VFS then finds the appropriate implementation in the Driver for the System-call and that Driver function executes the operation.
9. The Driver returns the result to the Kernel. The Kernel returns this value as the result of the System-call to the User-space.
10. The control-flow is as follows:
	=> User-space ---> Trap to Kernel-space ---> System-call Dispatcher ---> VFS sub-system ---> Driver File Operation and Execution ---> Kernel-space ---> User-space

Device File Deletion:
*********************
1. The last initializartion step in the start function needs to be the first clean up step for the Device.
2. The Kernel API function to remove all the information regarding the Device that was previously created with the 'device_create' function is:
	=> void device_destroy(const struct class *cls, dev_t devt);
	---> 'class' is the Pointer to the Device class. It is created with the function 'class_create'.
	---> 'devt' is the Device number.
	---> There is no return value for the function.
	---> It is defined in the Header file <linux/device.h>.
3. The usual place to call this function would be in the Module's end function.

Device Class Deletion:
**********************
1. The next step is to delete the Device class from the "/sys" directory.
2. The Kernel API function to destroy a Device class under the "/sys/class" that was previously created with the 'class_create' function is:
	=> void class_destroy(const struct class *cls);
	---> 'class' is the Pointer to the Device class. It is created with the function 'class_create'.
	---> There is no return value for the function.
	---> It is defined in the Header file <linux/device/class.h>.
3. The usual place to call this function would be in the Module's end function.

Character Device Deletion:
**************************
1. The next step is to unregister the 'cdev' Structure representing the Device that is registered with the User-space.
2. The function used is defined in the Header file <linux/cdev.h>.
3. The Kernel API function to unregister the Char Device with the Kernel is:
	=> void cdev_del(struct cdev *dev);
	---> 'cdev' is the Structure that holds the Device related information.
	---> There is no return value for the function.
4. After the 'cdev_del' function returns, the association between the Device number and the 'file_operations' Structure is removed.
5. The Kernel prevents any new User-space access to the Device via the Device files in "/dev".
6. The 'cdev_del' function does not free the Memory allocated to the 'cdev' Structure.
	1) If the Structure 'cdev' is allocated by the User statically, the 'cdev_del' function is enough to unregister.
	2) However, if the Structure 'cdev' is allocated dynamically using the 'cdev_alloc' or 'kmalloc' functions; the 'cdev_del' function is not enough to unregister.
7. To free the Memory allocated to the Structure 'cdev', the 'kfree' function must be executed.
	1) The command executed after the 'cdev_del' function to free the Memory is:
		=> kfree (&dev);
8. It is crucial for the proper clean up and prevents any Memory leaks.
9. The usual place to call this function would be in the Module's end function.

Device Numbers Deletion:
************************
1. The final step is to unregister the Device numbers allocated dynamically. The function used is defined in the Header file <linux/fs.h>.
2. Regardless of the method used to allocate the Device number, the function to free them is:
	=> void unregister_chrdev_region(dev_t first, unsigned int count);
	---> 'first' is the beginning Device number in the range of numbers to be de-registered.
	---> 'count' is the total number of Device numbers to be de-registered.
	---> There is no return value for the function.
3. The usual place to call this function would be in the Module's end function.
