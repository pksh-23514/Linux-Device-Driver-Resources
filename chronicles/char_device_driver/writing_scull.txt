Steps to Write the scull:
=========================

Establish Connection between Device file and Driver:
****************************************************
1. The Device number is created.
2. The Device file is created.
3. The Char Device Driver is registered with the VFS.
4. The Driver operations for the corresponding System-calls are implemented.

Dynamic Allocation of a Range of Device Numbers:
************************************************
1. The first step is to obtain one or more Device numbers.
2. The functions used are defined in the Header file <linux/fs.h>.
3. The Kernel API function to allocate the Major number (the Minor number is returned along with it) dynamically is:
	=> int alloc_chrdev_region(dev_t *dev, unsigned int baseminor, unsigned int count, const char *name);
	---> 'dev' is an output-only parameter that on successful execution holds the first number in the allocated range.
	---> 'baseminor' is the requested first minor number to use. It is usually zero.
	---> 'count' is the total number of contiguous Device numbers requested.
	---> 'name' is the Device name associated with the number range. This appears in the "/proc/devices" and "/sys" directories.
	---> The return value for the function: 0 is Success and Negative is Failure/Error.
4. For any new Drivers, it is strongly suggested to use the dynamic allocation of the Major Device number rather than choosing a number randomly that are free.
5. The Kernel API function to register a range of Device numbers is:
	=> int register_chrdev_region(dev_t first, unsigned int count, const char *name);
	---> 'first' is the beginning Device number in the desired range. It must include the Major number. The Minor number portion is not mandatory (often zero).
	---> 'count' is the total number of contiguous Device numbers requested.
	---> 'name' is the Device name associated with the number range. This appears in the "/proc/devices" and "/sys" directories.
	---> The return value for the function: 0 is Success and Negative is Failure/Error.
6. For this function to work well, the Device number must be known ahead of time. However, most of the time this is not the case.

Character Device Registration:
******************************
1. The next step is to register the Char Device with the VFS before the Kernel can invoke the Device's operations.
2. The Kernel uses the Structure Data-type 'struct cdev' to represent the Char Devices internally. It is defined in the Header file <linux/cdev.h>.
	=> struct cdev {
		   struct kobject kobj;
		   struct module *owner;
		   const struct file_operations *ops;
		   struct list_head list;
		   dev_t dev;
		   unsigned int count;
	   } __randomize_layout;
3. Each Device being handled has a separate 'cdev' Structure.
4. Without registering the Device, the User-space System-calls cannot be mapped to the Device Driver operations.
5. The functions used are defined in the Header file <linux/cdev.h>.
6. The Kernel API function to initialize the Structure 'cdev' that is already allocated by the User is:
	=> void cdev_init(struct cdev *cdev, const struct file_operations *fops);
	---> 'cdev' is the Structure already defined by the User that holds the Device related information.
	---> 'fops' is the Structure that defines the operations that can be performed on the Device. The 'struct file_operations' is defined in the Header file <linux/fs.h>.
	---> There is no return value for the function.
7. This function does not allocate Memory, it expects a 'struct cdev' to already exist before the function call.
8. It sets up the Structure with default values and prepares it for the registration with the Kernel.
9. The Kernel API function to obtain a standalone Structure 'cdev' dynamically is:
	=> struct cdev *cdev_alloc(void);
	---> There is no argument required.
	---> The return value for the function is a Pointer to the allocated Structure 'cdev'.
10. This function allocates Memory for the Structure 'cdev' using 'kmalloc' (or similar Kernel Memory allocation functions).
11. It is especially helpful where the requirement is to register a dynamic number of Devices or when the Device Structure needs to be part of a larger Data-structure.
12. The command to use this function is as below:
	=> struct cdev *my_cdev = cdev_alloc();
13. In both the 'cdev' and 'file_operations' Structure, there is a field 'owner' that should be set to 'THIS_MODULE'.
14. This field is used to prevent the Module from being unloaded while the Device is being used.
15. 'THIS_MODULE' is a Macro that represents a Pointer to the current Module's 'struct module'. It is defined in the Header file <linux/export.h>.
16. It is defined during the Build process of a Kernel Module. It is a way for the Kernel to track the Module having the ownership of a particular Device.
17. The Kernel API function to register the Char Device with the Kernel is:
	=> int cdev_add(struct cdev *dev, dev_t dev, unsigned int count);
	---> 'cdev' is the Structure that holds the Device related information.
	---> 'dev' is the first Device number for which the Device is responsible (obtained from the 'alloc_chrdev_region' function).
	---> 'count' is the total number of contiguous Device numbers.
	---> The return value for the function: 0 is Success and Negative is Failure/Error.
18. This function makes the Device ready to be accessed by the User-space applications. Thus, the Device becomes visible in "/proc/devices" and "/sys" directories.
19. It adds the Device to the Kernel's internal hash table 'cdev_map' for the Kernel to locate and manage the Device.
20. However, it does not create the Device nodes itself in "/dev" directory. Also, the function 'cdev_init' must be called before this function call.
21. As soon as the 'cdev_add' function returns, the Device is live i.e. the Device is immediately available for access and it's operations can be called.

Character Driver File Operation Methods:
****************************************
1. The Char Device Drivers have operations that provide implementations to the User-space System-calls such as open, read, write, close, llseek etc.
2. The Structure Data-type 'file_operations' contains the collection of Pointers to functions defined by the Driver that perform various operations on the Device.
3. The 'struct file_operations' is defined in the Header file <linux/fs.h>.
	=> struct file_operations {
		   struct module *owner;
		   fop_flags_t fop_flags;
		   loff_t (*llseek) (struct file *, loff_t, int);
		   ssize_t (*read) (struct file *, char __user *, size_t, loff_t *);
		   ssize_t (*write) (struct file *, const char __user *, size_t, loff_t *);
		   ...
		   int (*mmap) (struct file *, struct vm_area_struct *);
		   int (*open) (struct inode *, struct file *);
		   int (*flush) (struct file *, fl_owner_t id);
		   int (*release) (struct inode *, struct file *);
		   int (*fsync) (struct file *, loff_t, loff_t, int datasync);
		   int (*fasync) (int, struct file *, int);
		   int (*lock) (struct file *, int, struct file_lock *);
		   ...
	   } __randomize_layout;
4. Conventionally, the 'struct file_operations' is called 'fops'.
5. Each field in the Structure must point to a specific function or left as NULL for unsupported operations.
6. There are a number of operations that have a parameter with including '__user'. This annotation is a form of documentation.
7. It notes that the Pointer is a User-space Address that cannot be directly de-referenced.
8. For normal compilation, it has no effect but it can be used by external checking SW to find the misuse of User-space Addresses.

Freeing the Device Numbers:
***************************
1. The function used is defined in the Header file <linux/fs.h>.
2. Regardless of the method used to allocate the Device number, the function to free them is:
	=> void unregister_chrdev_region(dev_t first, unsigned int count);
	---> 'first' is the beginning Device number in the range of numbers to be de-registered.
	---> 'count' is the total number of Device numbers to be de-registered.
	---> There is no return value for the function.
3. The usual place to call this function would be in the Module's end function.
